EXEMPLE DE COMMANDE

contenue du fichier :
``` RenderWindowStruct.h
#ifndef SFML_RENDERWINDOWSTRUCT_H
#define SFML_RENDERWINDOWSTRUCT_H
 
// Headers
#include <SFML/Graphics/RenderWindow.hpp>
#include <SFML/Graphics/ViewStruct.h>


// Internal structure of sfRenderWindow
struct sfRenderWindow
{
    sf::RenderWindow This;
    sfView           DefaultView;
    sfView           CurrentView;
};


#endif // SFML_RENDERWINDOWSTRUCT_H
```

output en JSON:
```
{
    "lang": "C",
    "description": "struct",
    "prototypes": [],
    "symbols": [
        "C/CSFML/sfRenderWindow/This",
        "C/CSFML/sfRenderWindow/DefaultView",
        "C/CSFML/sfRenderWindow/CurrentView"
    ]
}
```

#######################################################################

contenue du fichier
``` Thread.hpp
#ifndef SFML_THREAD_HPP
#define SFML_THREAD_HPP

// Headers
#include <SFML/System/Export.hpp>
#include <SFML/System/NonCopyable.hpp>
#include <cstdlib>

namespace sf
{
    namespace priv
    {   
        class ThreadImpl;
        struct ThreadFunc;
    }

    class SFML_SYSTEM_API Thread : NonCopyable
    {
    public :

        template <typename F>
        Thread(F function);

        template <typename F, typename A>
        Thread(F function, A argument);

        template <typename C>
        Thread(void(C::*function)(), C* object);

        virtual ~Thread() = 0;

        void launch();

        void wait();

        void terminate();

    private :

        friend class priv::ThreadImpl;

        void run();

        // Member data
        priv::ThreadImpl* m_impl;  
        priv::ThreadFunc* m_entryPoint; 
    };
 
    #include <SFML/System/Thread.inl>

} // namespace sf

#endif // SFML_THREAD_HPP
```

output en JSON:
```
{
    "lang": "C++",
    "type": "class",
    "prototypes": [
        {
            "prototype": "class SFML_SYSTEM_API Thread : NonCopyable",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": [
        "C++/SFML/sf/SFML_SYSTEM_API/Thread",
        "C++/SFML/sf/SFML_SYSTEM_API/~Thread",
        "C++/SFML/sf/SFML_SYSTEM_API/launch",
        "C++/SFML/sf/SFML_SYSTEM_API/wait",
        "C++/SFML/sf/SFML_SYSTEM_API/terminate",
        "C++/SFML/sf/SFML_SYSTEM_API/run",
        "C++/SFML/sf/SFML_SYSTEM_API/m_impl",
        "C++/SFML/sf/SFML_SYSTEM_API/m_entryPoint"
    ]
}

path: "C++/SFML/sf/SFML_SYSTEM_API/Thread"
{
    "lang": "C++",
    "type": "constructor",
    "prototypes": [
        {
            "prototype": "public template <typename F> Thread(F function)",
            "description": "",
            "parameters": [
                {
                    "prototype": "F function",
                    "description": "",
                    "path": ""
                }
            ]
        },
        {
            "prototype": "public template <typename F, typename A> Thread(F function, A argument)",
            "description": "",
            "parameters": [
                {
                    "prototype": "F function",
                    "description": "",
                    "path": ""
                },
                {
                    "prototype": "A argument",
                    "description": "",
                    "path": ""
                }
            ]
        },
        {
            "prototype": "public template <typename C> Thread(void(C::*function)(), C* object)",
            "description": "",
            "parameters": [
                {
                    "prototype": "void(C::*function)()",
                    "description": "",
                    "path": ""
                },
                {
                    "prototype": "C* object",
                    "description": "",
                    "path": ""
                }
            ]
        }
    ],
    "symbols": []
}

path: "C++/SFML/sf/SFML_SYSTEM_API/~Thread"
{
    "lang": "C++",
    "type": "destructor",
    "prototypes": [
        {
            "prototype": "public virtual ~Thread() = 0",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": []
}

path: "C++/SFML/sf/SFML_SYSTEM_API/run"
{
    "lang": "C++",
    "type": "function",
    "prototypes": [
        {
            "prototype": "private void run()",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": []
}
```

#######################################################################

LE VRAI EXEMPLE DE CE QUE LE PARSER DOIT VRAIMENT FAIRE
INPUT
``` exemple_custom.h

#include <stdio.h>

#define TRUE 1                                                                  
#define FALSE 0                                                                 
#define IS_POSITIVE(t) ((t >= 0) ? (TRUE) : (FALSE))                            
                                                                                
typedef int BOOL;                                                               
                                                                                
struct apple {                                                                  
    BOOL alive;                                                                 
    char *serial_no;                                                            
};                                                                              
                                                                                
union box {                                                                     
    struct apple *food;                                                         
};                                                                              
                                                                                
BOOL manger(union box b) {                                                      
    char p[7] = "crunch\n";                                                     
    printf("%s", p);                                                            
}

```

output
```

path:"C/exemple/TRUE"
{
    "lang": "C",
    "type": "macro",
    "prototypes": [
        {
            "prototype": "#define TRUE 1",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": []
}

path:"C/exemple/FALSE"
{
    "lang": "C",
    "type": "macro",
    "prototypes": [
        {
            "prototype": "#define FALSE 0",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": []
}

path:"C/exemple/IS_POSITIVE"
{
    "lang": "C",
    "type": "macro",
    "prototypes": [
        {
            "prototype": "IS_POSITIVE(t)",
            "description": "",
            "parameters": [
                "prototype": "t",
                "description": "",
                "path": ""
            ]
        }
    ],
    "symbols": []
}

path:"C/exemple/BOOL"
{
    "lang": "C",
    "type": "typedef",
    "prototypes": [
        {
            "prototype": "typedef int BOOL",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": []
}

path:"C/exemple/apple"
{
    "lang": "C",
    "type": "struct",
    "prototypes": [
        {
            "prototype": "struct apple",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": [
        "C/exemple/apple/alive",
        "C/exemple/apple/serial_no"
    ]
}

path:"C/exemple/apple/alive"
{
    "lang": "C",
    "type": "attribute",
    "prototypes": [
        {
            "prototype": "BOOL alive",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": []
}


path:"C/exemple/apple/serial_no"
{
    "lang": "C",
    "type": "attribute",
    "prototypes": [
        {
            "prototype": "char* serial_no",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": []
}

path:"C/exemple/box"
{
    "lang": "C",
    "type": "union",
    "prototypes": [
        {
            "prototype": "union box",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": [
        "C/exemple/box/food"
    ]
}


path:"C/exemple/box/food/"
{
    "lang": "C",
    "type": "attribute",
    "prototypes": [
        {
            "prototype": "struct apple* food",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": []
}

path:"C/exemple/manger"
{
    "lang": "C",
    "type": "function",
    "prototypes": [
        {
            "prototype": "BOOL manger(union box b)",
            "description": "",
            "parameters": []
        }
    ],
    "symbols": []
}
```
