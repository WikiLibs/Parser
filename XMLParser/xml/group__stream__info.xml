<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__stream__info" kind="group">
    <compoundname>stream_info</compoundname>
    <title>Stream Information</title>
      <sectiondef kind="user-defined">
      <header>Functions for obtaining information about streams</header>
      <description><para>These functions allow you to get basic information about a stream, including seekability, the number of links (for chained streams), plus the size, duration, bitrate, header parameters, and meta information for each link (or, where available, the stream as a whole). Some of these (size, duration) are only available for seekable streams. You can also query the current stream position, link, and playback time, and instantaneous bitrate during playback.</para><para>Some of these functions may be used successfully on the partially open streams returned by <ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">op_test_callbacks()</ref> or one of the associated convenience functions. Their documention will indicate so explicitly. </para></description>
      <memberdef kind="function" id="group__stream__info_1ga9272a4a6ac9e01fbc549008f5ff58b4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int op_seekable</definition>
        <argsstring>(const OggOpusFile *_of) OP_ARG_NONNULL(1)</argsstring>
        <name>op_seekable</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether or not the data source being read is seekable. This is true if <orderedlist>
<listitem>
<para>The <computeroutput><ulink url="#op_seek_func">seek()</ulink></computeroutput> and <computeroutput><ulink url="#op_tell_func">tell()</ulink></computeroutput> callbacks are both non-<computeroutput>NULL</computeroutput>, </para></listitem>
<listitem>
<para>The <computeroutput><ulink url="#op_seek_func">seek()</ulink></computeroutput> callback was successfully executed at least once, and </para></listitem>
<listitem>
<para>The <computeroutput><ulink url="#op_tell_func">tell()</ulink></computeroutput> callback was successfully able to report the position indicator afterwards. </para></listitem>
</orderedlist>
This function may be called on partially-opened streams. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> whose seekable status is to be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A non-zero value if seekable, and 0 if unseekable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1gaaf6ff40725a8bc7e73c9d396ab91837d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int op_link_count</definition>
        <argsstring>(const OggOpusFile *_of) OP_ARG_NONNULL(1)</argsstring>
        <name>op_link_count</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of links in this chained stream. This function may be called on partially-opened streams, but it will always return 1. The actual number of links is not known until the stream is fully opened. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the link count. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>For fully-open seekable sources, this returns the total number of links in the whole stream, which will be at least 1. For partially-open or unseekable sources, this always returns 1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1ga41992ce6f066e07609e5fe2ccd961f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>opus_uint32</type>
        <definition>opus_uint32 op_serialno</definition>
        <argsstring>(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)</argsstring>
        <name>op_serialno</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the serial number of the given link in a (possibly-chained) Ogg Opus stream. This function may be called on partially-opened streams, but it will always return the serial number of the Opus stream in the first link. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the serial number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_li</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the link whose serial number should be retrieved. Use a negative number to get the serial number of the current link. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The serial number of the given link. If <emphasis>_li</emphasis> is greater than the total number of links, this returns the serial number of the last link. If the source is not seekable, this always returns the serial number of the current link. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1ga42c829e67c0ce8359bfbfc31a45c04f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int op_channel_count</definition>
        <argsstring>(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)</argsstring>
        <name>op_channel_count</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the channel count of the given link in a (possibly-chained) Ogg Opus stream. This is equivalent to <computeroutput>op_head(_of,_li)-&gt;channel_count</computeroutput>, but is provided for convenience. This function may be called on partially-opened streams, but it will always return the channel count of the Opus stream in the first link. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the channel count. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_li</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the link whose channel count should be retrieved. Use a negative number to get the channel count of the current link. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The channel count of the given link. If <emphasis>_li</emphasis> is greater than the total number of links, this returns the channel count of the last link. If the source is not seekable, this always returns the channel count of the current link. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1gaa433bdeab96315d315269b60ba52b877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>opus_int64</type>
        <definition>opus_int64 op_raw_total</definition>
        <argsstring>(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)</argsstring>
        <name>op_raw_total</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the total (compressed) size of the stream, or of an individual link in a (possibly-chained) Ogg Opus stream, including all headers and Ogg muxing overhead. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the compressed size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_li</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the link whose compressed size should be computed. Use a negative number to get the compressed size of the entire stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The compressed size of the entire stream if <emphasis>_li</emphasis> is negative, the compressed size of link <emphasis>_li</emphasis> if it is non-negative, or a negative value on error. The compressed size of the entire stream may be smaller than that of the underlying source if trailing garbage was detected in the file. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">OP_EINVAL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The source is not seekable (so we can&apos;t know the length), <emphasis>_li</emphasis> wasn&apos;t less than the total number of links in the stream, or the stream was only partially open. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1ga8c228c3d95f2c903ad6cfd2b78d8dad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ogg_int64_t</type>
        <definition>ogg_int64_t op_pcm_total</definition>
        <argsstring>(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)</argsstring>
        <name>op_pcm_total</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the total PCM length (number of samples at 48 kHz) of the stream, or of an individual link in a (possibly-chained) Ogg Opus stream. Users looking for <computeroutput>op_time_total()</computeroutput> should use <ref refid="group__stream__info_1ga8c228c3d95f2c903ad6cfd2b78d8dad6" kindref="member">op_pcm_total()</ref> instead. Because timestamps in Opus are fixed at 48 kHz, there is no need for a separate function to convert this to seconds (and leaving it out avoids introducing floating point to the API, for those that wish to avoid it). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the PCM offset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_li</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the link whose PCM length should be computed. Use a negative number to get the PCM length of the entire stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The PCM length of the entire stream if <emphasis>_li</emphasis> is negative, the PCM length of link <emphasis>_li</emphasis> if it is non-negative, or a negative value on error. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">OP_EINVAL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The source is not seekable (so we can&apos;t know the length), <emphasis>_li</emphasis> wasn&apos;t less than the total number of links in the stream, or the stream was only partially open. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1gabae95dfa8a278a305213332e295443bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_opus_head" kindref="compound">OpusHead</ref> *</type>
        <definition>const OpusHead* op_head</definition>
        <argsstring>(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)</argsstring>
        <name>op_head</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the ID header information for the given link in a (possibly chained) Ogg Opus stream. This function may be called on partially-opened streams, but it will always return the ID header information of the Opus stream in the first link. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the ID header information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_li</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the link whose ID header information should be retrieved. Use a negative number to get the ID header information of the current link. For an unseekable stream, <emphasis>_li</emphasis> is ignored, and the ID header information for the current link is always returned, if available. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The contents of the ID header for the given link. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1ga4b9b8b62a9fb04aee64c288e106a4822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_opus_tags" kindref="compound">OpusTags</ref> *</type>
        <definition>const OpusTags* op_tags</definition>
        <argsstring>(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)</argsstring>
        <name>op_tags</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the comment header information for the given link in a (possibly chained) Ogg Opus stream. This function may be called on partially-opened streams, but it will always return the tags from the Opus stream in the first link. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the comment header information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_li</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the link whose comment header information should be retrieved. Use a negative number to get the comment header information of the current link. For an unseekable stream, <emphasis>_li</emphasis> is ignored, and the comment header information for the current link is always returned, if available. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The contents of the comment header for the given link, or <computeroutput>NULL</computeroutput> if this is an unseekable stream that encountered an invalid link. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1gabd97a260a6740ea7c2c59ca9ecd592bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int op_current_link</definition>
        <argsstring>(const OggOpusFile *_of) OP_ARG_NONNULL(1)</argsstring>
        <name>op_current_link</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the index of the current link. This is the link that produced the data most recently read by <ref refid="group__stream__decoding_1ga73493002d84a234f5e19b70f1dddbe2a" kindref="member">op_read_float()</ref> or its associated functions, or, after a seek, the link that the seek target landed in. Reading more data may advance the link index (even on the first read after a seek). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the current link index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the current link on success, or a negative value on failure. For seekable streams, this is a number between 0 and the value returned by <ref refid="group__stream__info_1gaaf6ff40725a8bc7e73c9d396ab91837d" kindref="member">op_link_count()</ref>. For unseekable streams, this value starts at 0 and increments by one each time a new link is encountered (even though <ref refid="group__stream__info_1gaaf6ff40725a8bc7e73c9d396ab91837d" kindref="member">op_link_count()</ref> always returns 1). </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">OP_EINVAL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The stream was only partially open. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1538" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1ga2778b161df6d07abdd642f1a4802cc1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>opus_int32</type>
        <definition>opus_int32 op_bitrate</definition>
        <argsstring>(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)</argsstring>
        <name>op_bitrate</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the bitrate for a given link in a (possibly chained) Ogg Opus stream. The stream must be seekable to compute the bitrate. For unseekable streams, use <ref refid="group__stream__info_1ga7e9e871615055673d5e3c7b4c1dfce80" kindref="member">op_bitrate_instant()</ref> to get periodic estimates. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the bitrate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_li</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the link whose bitrate should be computed. USe a negative number to get the bitrate of the whole stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bitrate on success, or a negative value on error. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">OP_EINVAL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The stream was only partially open, the stream was not seekable, or <emphasis>_li</emphasis> was larger than the number of links. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1ga7e9e871615055673d5e3c7b4c1dfce80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>opus_int32</type>
        <definition>opus_int32 op_bitrate_instant</definition>
        <argsstring>(OggOpusFile *_of) OP_ARG_NONNULL(1)</argsstring>
        <name>op_bitrate_instant</name>
        <param>
          <type>OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the instantaneous bitrate, measured as the ratio of bits to playable samples decoded since a) the last call to <ref refid="group__stream__info_1ga7e9e871615055673d5e3c7b4c1dfce80" kindref="member">op_bitrate_instant()</ref>, b) the last seek, or c) the start of playback, whichever was most recent. This will spike somewhat after a seek or at the start/end of a chain boundary, as pre-skip, pre-roll, and end-trimming causes samples to be decoded but not played. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the bitrate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bitrate, in bits per second, or a negative value on error. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1ga4fd28e64a5cbe5e0ba163916199611a5" kindref="member">OP_FALSE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>No data has been decoded since any of the events described above. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">OP_EINVAL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The stream was only partially open. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1gab857684ab149c6225884ad94c3787561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>opus_int64</type>
        <definition>opus_int64 op_raw_tell</definition>
        <argsstring>(const OggOpusFile *_of) OP_ARG_NONNULL(1)</argsstring>
        <name>op_raw_tell</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtain the current value of the position indicator for <emphasis>_of</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the position indicator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The byte position that is currently being read from. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">OP_EINVAL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The stream was only partially open. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__info_1gae07b8e40d883cd2a43edfec8c5bfa205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ogg_int64_t</type>
        <definition>ogg_int64_t op_pcm_tell</definition>
        <argsstring>(const OggOpusFile *_of) OP_ARG_NONNULL(1)</argsstring>
        <name>op_pcm_tell</name>
        <param>
          <type>const OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtain the PCM offset of the next sample to be read. If the stream is not properly timestamped, this might not increment by the proper amount between reads, or even return monotonically increasing values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> from which to retrieve the PCM offset. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The PCM offset of the next sample to be read. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">OP_EINVAL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The stream was only partially open. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1579" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
