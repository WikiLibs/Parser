<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>My Project</title>
    <detaileddescription>
<sect1 id="index_1Introduction">
<title>Introduction</title>
<para>This is the documentation for the <computeroutput>libopusfile</computeroutput> C API.</para><para>The <computeroutput>libopusfile</computeroutput> package provides a convenient high-level API for decoding and basic manipulation of all Ogg Opus audio streams. <computeroutput>libopusfile</computeroutput> is implemented as a layer on top of Xiph.Org&apos;s reference <computeroutput><ulink url="https://www.xiph.org/ogg/doc/libogg/reference.html">libogg</ulink></computeroutput> and <computeroutput><ulink url="https://mf4.xiph.org/jenkins/view/opus/job/opus/ws/doc/html/index.html">libopus</ulink></computeroutput> libraries.</para><para><computeroutput>libopusfile</computeroutput> provides several sets of built-in routines for file/stream access, and may also use custom stream I/O routines provided by the embedded environment. There are built-in I/O routines provided for ANSI-compliant <computeroutput>stdio</computeroutput> (<computeroutput>FILE *</computeroutput>), memory buffers, and URLs (including &lt;file:&gt; URLs, plus optionally &lt;http:&gt; and &lt;https:&gt; URLs).</para></sect1>
<sect1 id="index_1Organization">
<title>Organization</title>
<para>The main API is divided into several sections:<itemizedlist>
<listitem><para><ref refid="group__stream__open__close" kindref="compound">Opening and Closing</ref></para></listitem><listitem><para><ref refid="group__stream__info" kindref="compound">Stream Information</ref></para></listitem><listitem><para><ref refid="group__stream__decoding" kindref="compound">Decoding</ref></para></listitem><listitem><para><ref refid="group__stream__seeking" kindref="compound">Seeking</ref></para></listitem></itemizedlist>
</para><para>Several additional sections are not tied to the main API.<itemizedlist>
<listitem><para><ref refid="group__stream__callbacks" kindref="compound">Abstract Stream Reading Interface</ref></para></listitem><listitem><para><ref refid="group__header__info" kindref="compound">Header Information</ref></para></listitem><listitem><para><ref refid="group__error__codes" kindref="compound">Error Codes</ref></para></listitem></itemizedlist>
</para></sect1>
<sect1 id="index_1Overview">
<title>Overview</title>
<para>The <computeroutput>libopusfile</computeroutput> API always decodes files to 48<nonbreakablespace/>kHz. The original sample rate is not preserved by the lossy compression, though it is stored in the header to allow you to resample to it after decoding (the <computeroutput>libopusfile</computeroutput> API does not currently provide a resampler, but the <ulink url="http://www.speex.org/docs/manual/speex-manual/node7.html#SECTION00760000000000000000">the Speex resampler</ulink> is a good choice if you need one). In general, if you are playing back the audio, you should leave it at 48<nonbreakablespace/>kHz, provided your audio hardware supports it. When decoding to a file, it may be worth resampling back to the original sample rate, so as not to surprise users who might not expect the sample rate to change after encoding to Opus and decoding.</para><para>Opus files can contain anywhere from 1 to 255 channels of audio. The channel mappings for up to 8 channels are the same as the <ulink url="http://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-800004.3.9">Vorbis mappings</ulink>. A special stereo API can convert everything to 2 channels, making it simple to support multichannel files in an application which only has stereo output. Although the <computeroutput>libopusfile</computeroutput> ABI provides support for the theoretical maximum number of channels, the current implementation does not support files with more than 8 channels, as they do not have well-defined channel mappings.</para><para>Like all Ogg files, Opus files may be &quot;chained&quot;. That is, multiple Opus files may be combined into a single, longer file just by concatenating the original files. This is commonly done in internet radio streaming, as it allows the title and artist to be updated each time the song changes, since each link in the chain includes its own set of metadata.</para><para><computeroutput>libopusfile</computeroutput> fully supports chained files. It will decode the first Opus stream found in each link of a chained file (ignoring any other streams that might be concurrently multiplexed with it, such as a video stream).</para><para>The channel count can also change between links. If your application is not prepared to deal with this, it can use the stereo API to ensure the audio from all links will always get decoded into a common format. Since <computeroutput>libopusfile</computeroutput> always decodes to 48<nonbreakablespace/>kHz, you do not have to worry about the sample rate changing between links (as was possible with Vorbis). This makes application support for chained files with <computeroutput>libopusfile</computeroutput> very easy. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
