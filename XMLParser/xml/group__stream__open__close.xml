<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__stream__open__close" kind="group">
    <compoundname>stream_open_close</compoundname>
    <title>Opening and Closing</title>
      <sectiondef kind="user-defined">
      <header>Functions for opening and closing streams</header>
      <description><para>These functions allow you to test a stream to see if it is Opus, open it, and close it. Several flavors are provided for each of the built-in stream types, plus a more general version which takes a set of application-provided callbacks. </para></description>
      <memberdef kind="function" id="group__stream__open__close_1ga54158ed1570a0062cb674115cd3699ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int op_test</definition>
        <argsstring>(OpusHead *_head, const unsigned char *_initial_data, size_t _initial_bytes)</argsstring>
        <name>op_test</name>
        <param>
          <type><ref refid="struct_opus_head" kindref="compound">OpusHead</ref> *</type>
          <declname>_head</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>_initial_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_initial_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test to see if this is an Opus stream. For good results, you will need at least 57 bytes (for a pure Opus-only stream). Something like 512 bytes will give more reliable results for multiplexed streams. This function is meant to be a quick-rejection filter. Its purpose is not to guarantee that a stream is a valid Opus stream, but to ensure that it looks enough like Opus that it isn&apos;t going to be recognized as some other format (except possibly an Opus stream that is also multiplexed with other codecs, such as video). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">_head</parametername>
</parameternamelist>
<parameterdescription>
<para>The parsed ID header contents. You may pass <computeroutput>NULL</computeroutput> if you do not need this information. If the function fails, the contents of this structure remain untouched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_initial_data</parametername>
</parameternamelist>
<parameterdescription>
<para>An initial buffer of data from the start of the stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_initial_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in <emphasis>_initial_data</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the data appears to be Opus, or a negative value on error. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1ga4fd28e64a5cbe5e0ba163916199611a5" kindref="member">OP_FALSE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was not enough data to tell if this was an Opus stream or not. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">OP_EFAULT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>An internal memory allocation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gaeea27378f826033ca23584d8403665d3" kindref="member">OP_EIMPL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The stream used a feature that is not implemented, such as an unsupported channel family. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">OP_ENOTFORMAT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If the data did not contain a recognizable ID header for an Opus stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" kindref="member">OP_EVERSION</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If the version field signaled a version this library does not know how to parse. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">OP_EBADHEADER</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The ID header was not properly formatted or contained illegal values. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1017" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1ga15866bd0cd7ac77162db3b0428962e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OP_WARN_UNUSED_RESULT OggOpusFile *</type>
        <definition>OP_WARN_UNUSED_RESULT OggOpusFile* op_open_file</definition>
        <argsstring>(const char *_path, int *_error) OP_ARG_NONNULL(1)</argsstring>
        <name>op_open_file</name>
        <param>
          <type>const char *</type>
          <declname>_path</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open a stream from the given file path. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file to open. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns 0 on success, or a failure code on error. You may pass in <computeroutput>NULL</computeroutput> if you don&apos;t want the failure code. The failure code will be <ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">OP_EFAULT</ref> if the file could not be opened, or one of the other failure codes from <ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">op_open_callbacks()</ref> otherwise. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A freshly opened <computeroutput>OggOpusFile</computeroutput>, or <computeroutput>NULL</computeroutput> on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1029" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1gaffc5769a1e5977f186f77a1fb08cb248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OP_WARN_UNUSED_RESULT OggOpusFile *</type>
        <definition>OP_WARN_UNUSED_RESULT OggOpusFile* op_open_memory</definition>
        <argsstring>(const unsigned char *_data, size_t _size, int *_error)</argsstring>
        <name>op_open_memory</name>
        <param>
          <type>const unsigned char *</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_size</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open a stream from a memory buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory buffer to open. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in the buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns 0 on success, or a failure code on error. You may pass in <computeroutput>NULL</computeroutput> if you don&apos;t want the failure code. See <ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">op_open_callbacks()</ref> for a full list of failure codes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A freshly opened <computeroutput>OggOpusFile</computeroutput>, or <computeroutput>NULL</computeroutput> on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1040" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1ga9a0c2a744653a559b84a5be8f551fe8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OP_WARN_UNUSED_RESULT OggOpusFile *</type>
        <definition>OP_WARN_UNUSED_RESULT OggOpusFile* op_vopen_url</definition>
        <argsstring>(const char *_url, int *_error, va_list _ap) OP_ARG_NONNULL(1)</argsstring>
        <name>op_vopen_url</name>
        <param>
          <type>const char *</type>
          <declname>_url</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>_error</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>_ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open a stream from a URL. This function behaves identically to <ref refid="group__stream__open__close_1gace8a90b60d492f3488ee3f14a7276ddf" kindref="member">op_open_url()</ref>, except that it takes a va_list instead of a variable number of arguments. It does not call the <computeroutput>va_end</computeroutput> macro, and because it invokes the <computeroutput>va_arg</computeroutput> macro, the value of <emphasis>_ap</emphasis> is undefined after the call. <simplesect kind="note"><para>If you use this function, you must link against <computeroutput>libopusurl</computeroutput>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_url</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL to open. Currently only the &lt;file:&gt;, &lt;http:&gt;, and &lt;https:&gt; schemes are supported. Both &lt;http:&gt; and &lt;https:&gt; may be disabled at compile time, in which case opening such URLs will always fail. Currently this only supports URIs. IRIs should be converted to UTF-8 and URL-escaped, with internationalized domain names encoded in punycode, before passing them to this function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns 0 on success, or a failure code on error. You may pass in <computeroutput>NULL</computeroutput> if you don&apos;t want the failure code. See <ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">op_open_callbacks()</ref> for a full list of failure codes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">_ap</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the <ref refid="group__url__options" kindref="compound">optional flags</ref> to use. This is a variable-length list of options terminated with <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A freshly opened <computeroutput>OggOpusFile</computeroutput>, or <computeroutput>NULL</computeroutput> on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1069" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1gace8a90b60d492f3488ee3f14a7276ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OP_WARN_UNUSED_RESULT OggOpusFile *</type>
        <definition>OP_WARN_UNUSED_RESULT OggOpusFile* op_open_url</definition>
        <argsstring>(const char *_url, int *_error,...) OP_ARG_NONNULL(1)</argsstring>
        <name>op_open_url</name>
        <param>
          <type>const char *</type>
          <declname>_url</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>_error</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open a stream from a URL. <simplesect kind="note"><para>If you use this function, you must link against <computeroutput>libopusurl</computeroutput>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_url</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL to open. Currently only the &lt;file:&gt;, &lt;http:&gt;, and &lt;https:&gt; schemes are supported. Both &lt;http:&gt; and &lt;https:&gt; may be disabled at compile time, in which case opening such URLs will always fail. Currently this only supports URIs. IRIs should be converted to UTF-8 and URL-escaped, with internationalized domain names encoded in punycode, before passing them to this function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns 0 on success, or a failure code on error. You may pass in <computeroutput>NULL</computeroutput> if you don&apos;t want the failure code. See <ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">op_open_callbacks()</ref> for a full list of failure codes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="group__url__options" kindref="compound">optional flags</ref> to use. This is a variable-length list of options terminated with <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A freshly opened <computeroutput>OggOpusFile</computeroutput>, or <computeroutput>NULL</computeroutput> on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1091" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OP_WARN_UNUSED_RESULT OggOpusFile *</type>
        <definition>OP_WARN_UNUSED_RESULT OggOpusFile* op_open_callbacks</definition>
        <argsstring>(void *_source, const OpusFileCallbacks *_cb, const unsigned char *_initial_data, size_t _initial_bytes, int *_error) OP_ARG_NONNULL(2)</argsstring>
        <name>op_open_callbacks</name>
        <param>
          <type>void *</type>
          <declname>_source</declname>
        </param>
        <param>
          <type>const <ref refid="struct_opus_file_callbacks" kindref="compound">OpusFileCallbacks</ref> *</type>
          <declname>_cb</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>_initial_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_initial_bytes</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open a stream using the given set of callbacks to access it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_source</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream to read from (e.g., a <computeroutput>FILE *</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callbacks with which to access the stream. <computeroutput><ulink url="#op_read_func">read()</ulink></computeroutput> must be implemented. <computeroutput><ulink url="#op_seek_func">seek()</ulink></computeroutput> and <computeroutput><ulink url="#op_tell_func">tell()</ulink></computeroutput> may be <computeroutput>NULL</computeroutput>, or may always return -1 to indicate a source is unseekable, but if <computeroutput><ulink url="#op_seek_func">seek()</ulink></computeroutput> is implemented and succeeds on a particular source, then <computeroutput><ulink url="#op_tell_func">tell()</ulink></computeroutput> must also. <computeroutput><ulink url="#op_close_func">close()</ulink></computeroutput> may be <computeroutput>NULL</computeroutput>, but if it is not, it will be called when the <computeroutput>OggOpusFile</computeroutput> is destroyed by <ref refid="group__stream__open__close_1gaf494ef9aa761647d8167c49507560d1c" kindref="member">op_free()</ref>. It will not be called if <ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">op_open_callbacks()</ref> fails with an error. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_initial_data</parametername>
</parameternamelist>
<parameterdescription>
<para>An initial buffer of data from the start of the stream. Applications can read some number of bytes from the start of the stream to help identify this as an Opus stream, and then provide them here to allow the stream to be opened, even if it is unseekable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_initial_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in <emphasis>_initial_data</emphasis>. If the stream is seekable, its current position (as reported by <computeroutput><ulink url="#opus_tell_func">tell()</ulink></computeroutput> at the start of this function) must be equal to <emphasis>_initial_bytes</emphasis>. Otherwise, seeking to absolute positions will generate inconsistent results. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns 0 on success, or a failure code on error. You may pass in <computeroutput>NULL</computeroutput> if you don&apos;t want the failure code. The failure code will be one of <variablelist>
<varlistentry><term><ref refid="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" kindref="member">OP_EREAD</ref> </term></varlistentry>
<listitem><para>An underlying read, seek, or tell operation failed when it should have succeeded, or we failed to find data in the stream we had seen before. </para></listitem>
<varlistentry><term><ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">OP_EFAULT</ref> </term></varlistentry>
<listitem><para>There was a memory allocation failure, or an internal library error. </para></listitem>
<varlistentry><term><ref refid="group__error__codes_1gaeea27378f826033ca23584d8403665d3" kindref="member">OP_EIMPL</ref> </term></varlistentry>
<listitem><para>The stream used a feature that is not implemented, such as an unsupported channel family. </para></listitem>
<varlistentry><term><ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">OP_EINVAL</ref> </term></varlistentry>
<listitem><para><computeroutput><ulink url="#op_seek_func">seek()</ulink></computeroutput> was implemented and succeeded on this source, but <computeroutput><ulink url="#op_tell_func">tell()</ulink></computeroutput> did not, or the starting position indicator was not equal to <emphasis>_initial_bytes</emphasis>. </para></listitem>
<varlistentry><term><ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">OP_ENOTFORMAT</ref> </term></varlistentry>
<listitem><para>The stream contained a link that did not have any logical Opus streams in it. </para></listitem>
<varlistentry><term><ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">OP_EBADHEADER</ref> </term></varlistentry>
<listitem><para>A required header packet was not properly formatted, contained illegal values, or was missing altogether. </para></listitem>
<varlistentry><term><ref refid="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" kindref="member">OP_EVERSION</ref> </term></varlistentry>
<listitem><para>An ID header contained an unrecognized version number. </para></listitem>
<varlistentry><term><ref refid="group__error__codes_1gaf7b58a439a471366e9eb5b8f2a8cd041" kindref="member">OP_EBADLINK</ref> </term></varlistentry>
<listitem><para>We failed to find data we had seen before after seeking. </para></listitem>
<varlistentry><term><ref refid="group__error__codes_1gaf82657fc888f1dcf2e0d8f066b8a6cc7" kindref="member">OP_EBADTIMESTAMP</ref> </term></varlistentry>
<listitem><para>The first or last timestamp in a link failed basic validity checks. </para></listitem>
</variablelist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A freshly opened <computeroutput>OggOpusFile</computeroutput>, or <computeroutput>NULL</computeroutput> on error. <computeroutput>libopusfile</computeroutput> does <emphasis>not</emphasis> take ownership of the source if the call fails. The calling application is responsible for closing the source if this call returns an error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1ga3b12533b35cd3ac0d273c1e0efa35b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OP_WARN_UNUSED_RESULT OggOpusFile *</type>
        <definition>OP_WARN_UNUSED_RESULT OggOpusFile* op_test_file</definition>
        <argsstring>(const char *_path, int *_error) OP_ARG_NONNULL(1)</argsstring>
        <name>op_test_file</name>
        <param>
          <type>const char *</type>
          <declname>_path</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Partially open a stream from the given file path. <simplesect kind="see"><para><ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">op_test_callbacks</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file to open. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns 0 on success, or a failure code on error. You may pass in <computeroutput>NULL</computeroutput> if you don&apos;t want the failure code. The failure code will be <ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">OP_EFAULT</ref> if the file could not be opened, or one of the other failure codes from <ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">op_open_callbacks()</ref> otherwise. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A partially opened <computeroutput>OggOpusFile</computeroutput>, or <computeroutput>NULL</computeroutput> on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1gae093e19e16871f4cb53532fe1f0c1039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OP_WARN_UNUSED_RESULT OggOpusFile *</type>
        <definition>OP_WARN_UNUSED_RESULT OggOpusFile* op_test_memory</definition>
        <argsstring>(const unsigned char *_data, size_t _size, int *_error)</argsstring>
        <name>op_test_memory</name>
        <param>
          <type>const unsigned char *</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_size</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Partially open a stream from a memory buffer. <simplesect kind="see"><para><ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">op_test_callbacks</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory buffer to open. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in the buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns 0 on success, or a failure code on error. You may pass in <computeroutput>NULL</computeroutput> if you don&apos;t want the failure code. See <ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">op_open_callbacks()</ref> for a full list of failure codes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A partially opened <computeroutput>OggOpusFile</computeroutput>, or <computeroutput>NULL</computeroutput> on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1ga93b438960ec52e13e7c77446f754d016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OP_WARN_UNUSED_RESULT OggOpusFile *</type>
        <definition>OP_WARN_UNUSED_RESULT OggOpusFile* op_vtest_url</definition>
        <argsstring>(const char *_url, int *_error, va_list _ap) OP_ARG_NONNULL(1)</argsstring>
        <name>op_vtest_url</name>
        <param>
          <type>const char *</type>
          <declname>_url</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>_error</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>_ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Partially open a stream from a URL. This function behaves identically to <ref refid="group__stream__open__close_1ga8272aa50f50ac63b20333f0a114bb247" kindref="member">op_test_url()</ref>, except that it takes a va_list instead of a variable number of arguments. It does not call the <computeroutput>va_end</computeroutput> macro, and because it invokes the <computeroutput>va_arg</computeroutput> macro, the value of <emphasis>_ap</emphasis> is undefined after the call. <simplesect kind="note"><para>If you use this function, you must link against <computeroutput>libopusurl</computeroutput>. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__stream__open__close_1ga8272aa50f50ac63b20333f0a114bb247" kindref="member">op_test_url</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">op_test_callbacks</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_url</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL to open. Currently only the &lt;file:&gt;, &lt;http:&gt;, and &lt;https:&gt; schemes are supported. Both &lt;http:&gt; and &lt;https:&gt; may be disabled at compile time, in which case opening such URLs will always fail. Currently this only supports URIs. IRIs should be converted to UTF-8 and URL-escaped, with internationalized domain names encoded in punycode, before passing them to this function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns 0 on success, or a failure code on error. You may pass in <computeroutput>NULL</computeroutput> if you don&apos;t want the failure code. See <ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">op_open_callbacks()</ref> for a full list of failure codes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">_ap</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the <ref refid="group__url__options" kindref="compound">optional flags</ref> to use. This is a variable-length list of options terminated with <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A partially opened <computeroutput>OggOpusFile</computeroutput>, or <computeroutput>NULL</computeroutput> on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1ga8272aa50f50ac63b20333f0a114bb247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OP_WARN_UNUSED_RESULT OggOpusFile *</type>
        <definition>OP_WARN_UNUSED_RESULT OggOpusFile* op_test_url</definition>
        <argsstring>(const char *_url, int *_error,...) OP_ARG_NONNULL(1)</argsstring>
        <name>op_test_url</name>
        <param>
          <type>const char *</type>
          <declname>_url</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>_error</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Partially open a stream from a URL. <simplesect kind="note"><para>If you use this function, you must link against <computeroutput>libopusurl</computeroutput>. </para></simplesect>
<simplesect kind="see"><para><ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">op_test_callbacks</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_url</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL to open. Currently only the &lt;file:&gt;, &lt;http:&gt;, and &lt;https:&gt; schemes are supported. Both &lt;http:&gt; and &lt;https:&gt; may be disabled at compile time, in which case opening such URLs will always fail. Currently this only supports URIs. IRIs should be converted to UTF-8 and URL-escaped, with internationalized domain names encoded in punycode, before passing them to this function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns 0 on success, or a failure code on error. You may pass in <computeroutput>NULL</computeroutput> if you don&apos;t want the failure code. See <ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">op_open_callbacks()</ref> for a full list of failure codes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="group__url__options" kindref="compound">optional flags</ref> to use. This is a variable-length list of options terminated with <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A partially opened <computeroutput>OggOpusFile</computeroutput>, or <computeroutput>NULL</computeroutput> on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OP_WARN_UNUSED_RESULT OggOpusFile *</type>
        <definition>OP_WARN_UNUSED_RESULT OggOpusFile* op_test_callbacks</definition>
        <argsstring>(void *_source, const OpusFileCallbacks *_cb, const unsigned char *_initial_data, size_t _initial_bytes, int *_error) OP_ARG_NONNULL(2)</argsstring>
        <name>op_test_callbacks</name>
        <param>
          <type>void *</type>
          <declname>_source</declname>
        </param>
        <param>
          <type>const <ref refid="struct_opus_file_callbacks" kindref="compound">OpusFileCallbacks</ref> *</type>
          <declname>_cb</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>_initial_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_initial_bytes</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Partially open a stream using the given set of callbacks to access it. This tests for Opusness and loads the headers for the first link. It does not seek (although it tests for seekability). You can query a partially open stream for the few pieces of basic information returned by <ref refid="group__stream__info_1ga41992ce6f066e07609e5fe2ccd961f40" kindref="member">op_serialno()</ref>, <ref refid="group__stream__info_1ga42c829e67c0ce8359bfbfc31a45c04f4" kindref="member">op_channel_count()</ref>, <ref refid="group__stream__info_1gabae95dfa8a278a305213332e295443bb" kindref="member">op_head()</ref>, and <ref refid="group__stream__info_1ga4b9b8b62a9fb04aee64c288e106a4822" kindref="member">op_tags()</ref> (but only for the first link). You may also determine if it is seekable via a call to <ref refid="group__stream__info_1ga9272a4a6ac9e01fbc549008f5ff58b4c" kindref="member">op_seekable()</ref>. You cannot read audio from the stream, seek, get the size or duration, get information from links other than the first one, or even get the total number of links until you finish opening the stream with <ref refid="group__stream__open__close_1ga7b7f1c778ce6ced5538ce66e292d894d" kindref="member">op_test_open()</ref>. If you do not need to do any of these things, you can dispose of it with <ref refid="group__stream__open__close_1gaf494ef9aa761647d8167c49507560d1c" kindref="member">op_free()</ref> instead. This function is provided mostly to simplify porting existing code that used <computeroutput>libvorbisfile</computeroutput>. For new code, you are likely better off using <ref refid="group__stream__open__close_1ga54158ed1570a0062cb674115cd3699ab" kindref="member">op_test()</ref> instead, which is less resource-intensive, requires less data to succeed, and imposes a hard limit on the amount of data it examines (important for unseekable sources, where all such data must be buffered until you are sure of the stream type). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_source</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream to read from (e.g., a <computeroutput>FILE *</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callbacks with which to access the stream. <computeroutput><ulink url="#op_read_func">read()</ulink></computeroutput> must be implemented. <computeroutput><ulink url="#op_seek_func">seek()</ulink></computeroutput> and <computeroutput><ulink url="#op_tell_func">tell()</ulink></computeroutput> may be <computeroutput>NULL</computeroutput>, or may always return -1 to indicate a source is unseekable, but if <computeroutput><ulink url="#op_seek_func">seek()</ulink></computeroutput> is implemented and succeeds on a particular source, then <computeroutput><ulink url="#op_tell_func">tell()</ulink></computeroutput> must also. <computeroutput><ulink url="#op_close_func">close()</ulink></computeroutput> may be <computeroutput>NULL</computeroutput>, but if it is not, it will be called when the <computeroutput>OggOpusFile</computeroutput> is destroyed by <ref refid="group__stream__open__close_1gaf494ef9aa761647d8167c49507560d1c" kindref="member">op_free()</ref>. It will not be called if <ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">op_open_callbacks()</ref> fails with an error. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_initial_data</parametername>
</parameternamelist>
<parameterdescription>
<para>An initial buffer of data from the start of the stream. Applications can read some number of bytes from the start of the stream to help identify this as an Opus stream, and then provide them here to allow the stream to be tested more thoroughly, even if it is unseekable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_initial_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in <emphasis>_initial_data</emphasis>. If the stream is seekable, its current position (as reported by <computeroutput><ulink url="#opus_tell_func">tell()</ulink></computeroutput> at the start of this function) must be equal to <emphasis>_initial_bytes</emphasis>. Otherwise, seeking to absolute positions will generate inconsistent results. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns 0 on success, or a failure code on error. You may pass in <computeroutput>NULL</computeroutput> if you don&apos;t want the failure code. See <ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">op_open_callbacks()</ref> for a full list of failure codes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A partially opened <computeroutput>OggOpusFile</computeroutput>, or <computeroutput>NULL</computeroutput> on error. <computeroutput>libopusfile</computeroutput> does <emphasis>not</emphasis> take ownership of the source if the call fails. The calling application is responsible for closing the source if this call returns an error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1ga7b7f1c778ce6ced5538ce66e292d894d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int op_test_open</definition>
        <argsstring>(OggOpusFile *_of) OP_ARG_NONNULL(1)</argsstring>
        <name>op_test_open</name>
        <param>
          <type>OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finish opening a stream partially opened with <ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">op_test_callbacks()</ref> or one of the associated convenience functions. If this function fails, you are still responsible for freeing the <computeroutput>OggOpusFile</computeroutput> with <ref refid="group__stream__open__close_1gaf494ef9aa761647d8167c49507560d1c" kindref="member">op_free()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> to finish opening. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or a negative value on error. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" kindref="member">OP_EREAD</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>An underlying read, seek, or tell operation failed when it should have succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">OP_EFAULT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was a memory allocation failure, or an internal library error. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gaeea27378f826033ca23584d8403665d3" kindref="member">OP_EIMPL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The stream used a feature that is not implemented, such as an unsupported channel family. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">OP_EINVAL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The stream was not partially opened with <ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">op_test_callbacks()</ref> or one of the associated convenience functions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">OP_ENOTFORMAT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The stream contained a link that did not have any logical Opus streams in it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">OP_EBADHEADER</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>A required header packet was not properly formatted, contained illegal values, or was missing altogether. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" kindref="member">OP_EVERSION</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>An ID header contained an unrecognized version number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gaf7b58a439a471366e9eb5b8f2a8cd041" kindref="member">OP_EBADLINK</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>We failed to find data we had seen before after seeking. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group__error__codes_1gaf82657fc888f1dcf2e0d8f066b8a6cc7" kindref="member">OP_EBADTIMESTAMP</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The first or last timestamp in a link failed basic validity checks. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__stream__open__close_1gaf494ef9aa761647d8167c49507560d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void op_free</definition>
        <argsstring>(OggOpusFile *_of)</argsstring>
        <name>op_free</name>
        <param>
          <type>OggOpusFile *</type>
          <declname>_of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release all memory used by an <computeroutput>OggOpusFile</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>OggOpusFile</computeroutput> to free. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/personnal/opusfile.h" line="1351" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
