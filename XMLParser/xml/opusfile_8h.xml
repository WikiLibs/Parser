<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
	<compounddef id="opusfile_8h" kind="file" language="C++">
		<compoundname>
			opusfile.h
		</compoundname>
		<includes local="no">
			stdarg.h
		</includes>
		<includes local="no">
			stdio.h
		</includes>
		<includes local="no">
			ogg/ogg.h
		</includes>
		<includes local="no">
			opus_multistream.h
		</includes>
		<incdepgraph>
			<node id="1">
				<label>
					stdarg.h
				</label>
			</node>
			<node id="4">
				<label>
					opus_multistream.h
				</label>
			</node>
			<node id="0">
				<label>
					includes/personnal/opusfile.h
				</label>
				<link refid="opusfile_8h" />
				<childnode refid="1" relation="include">
				</childnode>
				<childnode refid="2" relation="include">
				</childnode>
				<childnode refid="3" relation="include">
				</childnode>
				<childnode refid="4" relation="include">
				</childnode>
			</node>
			<node id="3">
				<label>
					ogg/ogg.h
				</label>
			</node>
			<node id="2">
				<label>
					stdio.h
				</label>
			</node>
		</incdepgraph>
		<innerclass refid="struct_opus_head" prot="public">
			OpusHead
		</innerclass>
		<innerclass refid="struct_opus_tags" prot="public">
			OpusTags
		</innerclass>
		<innerclass refid="struct_opus_picture_tag" prot="public">
			OpusPictureTag
		</innerclass>
		<innerclass refid="struct_opus_server_info" prot="public">
			OpusServerInfo
		</innerclass>
		<innerclass refid="struct_opus_file_callbacks" prot="public">
			OpusFileCallbacks
		</innerclass>
		<sectiondef kind="user-defined">
			<header>
				List of possible error codes
			</header>
			<description>
				<para>
					Many of the functions in this library return a negative error code when a function fails. This list provides a brief explanation of the common errors. See each individual function for more details on what a specific error code means in that context.
				</para>
			</description>
			<memberdef kind="define" id="group__error__codes_1ga4fd28e64a5cbe5e0ba163916199611a5" prot="public" static="no">
				<name>
					OP_FALSE
				</name>
				<initializer>
					(-1)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						A request did not succeed.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="146" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="146" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1ga3fdffc8ee880969d99fc862d53c0efd2" prot="public" static="no">
				<name>
					OP_EOF
				</name>
				<initializer>
					(-2)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="148" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="148" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1ga2ac03d35986d3505305d468dd2138b72" prot="public" static="no">
				<name>
					OP_HOLE
				</name>
				<initializer>
					(-3)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						There was a hole in the page sequence numbers (e.g., a page was corrupt or missing).
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="151" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="151" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" prot="public" static="no">
				<name>
					OP_EREAD
				</name>
				<initializer>
					(-128)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						An underlying read, seek, or tell operation failed when it should have succeeded.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="154" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="154" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" prot="public" static="no">
				<name>
					OP_EFAULT
				</name>
				<initializer>
					(-129)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						A
						<computeroutput>
							NULL
						</computeroutput>
						pointer was passed where one was unexpected, or an internal memory allocation failed, or an internal library error was encountered.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="158" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="158" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1gaeea27378f826033ca23584d8403665d3" prot="public" static="no">
				<name>
					OP_EIMPL
				</name>
				<initializer>
					(-130)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						The stream used a feature that is not implemented, such as an unsupported channel family.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="161" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="161" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" prot="public" static="no">
				<name>
					OP_EINVAL
				</name>
				<initializer>
					(-131)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						One or more parameters to a function were invalid.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="163" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="163" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1gafca3ae244d24e10b2851c77379453220" prot="public" static="no">
				<name>
					OP_ENOTFORMAT
				</name>
				<initializer>
					(-132)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						A purported Ogg Opus stream did not begin with an Ogg page, a purported header packet did not start with one of the required strings, &quot;OpusHead&quot; or &quot;OpusTags&quot;, or a link in a chained file was encountered that did not contain any logical Opus streams.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="168" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="168" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" prot="public" static="no">
				<name>
					OP_EBADHEADER
				</name>
				<initializer>
					(-133)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						A required header packet was not properly formatted, contained illegal values, or was missing altogether.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="171" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="171" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" prot="public" static="no">
				<name>
					OP_EVERSION
				</name>
				<initializer>
					(-134)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						The ID header contained an unrecognized version number.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="173" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="173" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1ga3a2a6cb4837030d240f326e17dda3c0e" prot="public" static="no">
				<name>
					OP_ENOTAUDIO
				</name>
				<initializer>
					(-135)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="175" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="175" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1gaa3fa0a3e6facc4f47924271e65bb21ff" prot="public" static="no">
				<name>
					OP_EBADPACKET
				</name>
				<initializer>
					(-136)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						An audio packet failed to decode properly. This is usually caused by a multistream Ogg packet where the durations of the individual Opus packets contained in it are not all the same.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="179" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="179" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1gaf7b58a439a471366e9eb5b8f2a8cd041" prot="public" static="no">
				<name>
					OP_EBADLINK
				</name>
				<initializer>
					(-137)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						We failed to find data we had seen before, or the bitstream structure was sufficiently malformed that seeking to the target destination was impossible.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="183" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="183" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1gadd54f4d82cfabedb5963331fbe0bc99c" prot="public" static="no">
				<name>
					OP_ENOSEEK
				</name>
				<initializer>
					(-138)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						An operation that requires seeking was requested on an unseekable stream.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="185" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="185" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__error__codes_1gaf82657fc888f1dcf2e0d8f066b8a6cc7" prot="public" static="no">
				<name>
					OP_EBADTIMESTAMP
				</name>
				<initializer>
					(-139)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						The first or last granule position of a link failed basic validity checks.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="187" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="187" bodyend="-1" />
			</memberdef>
		</sectiondef>
		<sectiondef kind="user-defined">
			<header>
				Picture tag image formats
			</header>
			<memberdef kind="define" id="group__header__info_1gade2f09dce6330529fc3c96d1740df653" prot="public" static="no">
				<name>
					OP_PIC_FORMAT_UNKNOWN
				</name>
				<initializer>
					(-1)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						The MIME type was not recognized, or the image data did not match the declared MIME type.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="299" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="299" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__header__info_1gaac4ef30a33caf090b9b1a5ada8f48204" prot="public" static="no">
				<name>
					OP_PIC_FORMAT_URL
				</name>
				<initializer>
					(0)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						The MIME type indicates the image data is really a URL.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="301" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="301" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__header__info_1gaf75ae037b78a4a048359261439395450" prot="public" static="no">
				<name>
					OP_PIC_FORMAT_JPEG
				</name>
				<initializer>
					(1)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						The image is a JPEG.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="303" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="303" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__header__info_1ga703554b177ae75bd6999bbd30d485d3f" prot="public" static="no">
				<name>
					OP_PIC_FORMAT_PNG
				</name>
				<initializer>
					(2)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						The image is a PNG.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="305" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="305" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__header__info_1gaa7d5e8cb675cb2da840f258b761e7781" prot="public" static="no">
				<name>
					OP_PIC_FORMAT_GIF
				</name>
				<initializer>
					(3)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						The image is a GIF.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="307" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="307" bodyend="-1" />
			</memberdef>
		</sectiondef>
		<sectiondef kind="user-defined">
			<header>
				Functions for manipulating header data
			</header>
			<description>
				<para>
					These functions manipulate the
					<ref refid="struct_opus_head" kindref="compound">
						OpusHead
					</ref>
					and
					<ref refid="struct_opus_tags" kindref="compound">
						OpusTags
					</ref>
					structures, which describe the audio parameters and tag-value metadata, respectively. These can be used to query the headers returned by
					<computeroutput>
						libopusfile
					</computeroutput>
					, or to parse Opus headers from sources other than an Ogg Opus stream, provided they use the same format.
				</para>
			</description>
			<memberdef kind="function" id="group__header__info_1gac3259b44ac8dfac93c7adf708de96d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT int
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT int opus_head_parse
				</definition>
				<argsstring>
					(OpusHead *_head, const unsigned char *_data, size_t _len) OP_ARG_NONNULL(2)
				</argsstring>
				<name>
					opus_head_parse
				</name>
				<param>
					<type>
						<ref refid="struct_opus_head" kindref="compound">
							OpusHead
						</ref>
						*
					</type>
					<declname>
						_head
					</declname>
				</param>
				<param>
					<type>
						const unsigned char *
					</type>
					<declname>
						_data
					</declname>
				</param>
				<param>
					<type>
						size_t
					</type>
					<declname>
						_len
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Parses the contents of the ID header packet of an Ogg Opus stream.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_head
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns the contents of the parsed packet. The contents of this structure are untouched on error. This may be
										<computeroutput>
											NULL
										</computeroutput>
										to merely test the header for validity.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="in">
										_data
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The contents of the ID header packet.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_len
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of bytes of data in the ID header packet.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								0 on success or a negative value on error.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">
											OP_ENOTFORMAT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										If the data does not start with the &quot;OpusHead&quot; string.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" kindref="member">
											OP_EVERSION
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										If the version field signaled a version this library does not know how to parse.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaeea27378f826033ca23584d8403665d3" kindref="member">
											OP_EIMPL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										If the channel mapping family was 255, which general purpose players should not attempt to play.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">
											OP_EBADHEADER
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										If the contents of the packet otherwise violate the Ogg Opus specification:
										<itemizedlist>
											<listitem>
												<para>
													Insufficient data,
												</para>
											</listitem>
											<listitem>
												<para>
													Too much data for the known minor versions,
												</para>
											</listitem>
											<listitem>
												<para>
													An unrecognized channel mapping family,
												</para>
											</listitem>
											<listitem>
												<para>
													Zero channels or too many channels,
												</para>
											</listitem>
											<listitem>
												<para>
													Zero coded streams,
												</para>
											</listitem>
											<listitem>
												<para>
													Too many coupled streams, or
												</para>
											</listitem>
											<listitem>
												<para>
													An invalid channel mapping index.
												</para>
											</listitem>
										</itemizedlist>
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="408" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1gaac9c6e1916fba6e53152b936055d3db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					ogg_int64_t
				</type>
				<definition>
					ogg_int64_t opus_granule_sample
				</definition>
				<argsstring>
					(const OpusHead *_head, ogg_int64_t _gp) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					opus_granule_sample
				</name>
				<param>
					<type>
						const
						<ref refid="struct_opus_head" kindref="compound">
							OpusHead
						</ref>
						*
					</type>
					<declname>
						_head
					</declname>
				</param>
				<param>
					<type>
						ogg_int64_t
					</type>
					<declname>
						_gp
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Converts a granule position to a sample offset for a given Ogg Opus stream. The sample offset is simply
						<computeroutput>
							_gp-_head-&gt;pre_skip
						</computeroutput>
						. Granule position values smaller than
						<ref refid="struct_opus_head_1ab448d3d3289d99f01dca8f19e878d57f" kindref="member">
							OpusHead::pre_skip
						</ref>
						correspond to audio that should never be played, and thus have no associated sample offset. This function returns -1 for such values. This function also correctly handles extremely large granule positions, which may have wrapped around to a negative number when stored in a signed ogg_int64_t value.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_head
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="struct_opus_head" kindref="compound">
											OpusHead
										</ref>
										information from the ID header of the stream.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_gp
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The granule position to convert.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The sample offset associated with the given granule position (counting at a 48 kHz sampling rate), or the special value -1 on error (i.e., the granule position was smaller than the pre-skip amount).
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="425" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1gaed7c41a177cc7338ffec1e7ae57c59b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT int
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT int opus_tags_parse
				</definition>
				<argsstring>
					(OpusTags *_tags, const unsigned char *_data, size_t _len) OP_ARG_NONNULL(2)
				</argsstring>
				<name>
					opus_tags_parse
				</name>
				<param>
					<type>
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						*
					</type>
					<declname>
						_tags
					</declname>
				</param>
				<param>
					<type>
						const unsigned char *
					</type>
					<declname>
						_data
					</declname>
				</param>
				<param>
					<type>
						size_t
					</type>
					<declname>
						_len
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Parses the contents of the &apos;comment&apos; header packet of an Ogg Opus stream.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_tags
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An uninitialized
										<ref refid="struct_opus_tags" kindref="compound">
											OpusTags
										</ref>
										structure. This returns the contents of the parsed packet. The contents of this structure are untouched on error. This may be
										<computeroutput>
											NULL
										</computeroutput>
										to merely test the header for validity.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="in">
										_data
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The contents of the &apos;comment&apos; header packet.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_len
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of bytes of data in the &apos;info&apos; header packet.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										0
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Success.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">
											OP_ENOTFORMAT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										If the data does not start with the &quot;OpusTags&quot; string.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">
											OP_EBADHEADER
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										If the contents of the packet otherwise violate the Ogg Opus specification.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										If there wasn&apos;t enough memory to store the tags.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="442" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1gaceda528fa8f9f9ad1443df2eeeeaa8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int opus_tags_copy
				</definition>
				<argsstring>
					(OpusTags *_dst, const OpusTags *_src) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					opus_tags_copy
				</name>
				<param>
					<type>
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						*
					</type>
					<declname>
						_dst
					</declname>
				</param>
				<param>
					<type>
						const
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						*
					</type>
					<declname>
						_src
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Performs a deep copy of an
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						structure.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_dst
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="struct_opus_tags" kindref="compound">
											OpusTags
										</ref>
										structure to copy into. If this function fails, the contents of this structure remain untouched.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_src
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="struct_opus_tags" kindref="compound">
											OpusTags
										</ref>
										structure to copy from.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										0
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Success.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										If there wasn&apos;t enough memory to copy the tags.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="452" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1ga35f993f5a8f11337a6503a2f43996fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					void
				</type>
				<definition>
					void opus_tags_init
				</definition>
				<argsstring>
					(OpusTags *_tags) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					opus_tags_init
				</name>
				<param>
					<type>
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						*
					</type>
					<declname>
						_tags
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Initializes an
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						structure. This should be called on a freshly allocated
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						structure before attempting to use it.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tags
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="struct_opus_tags" kindref="compound">
											OpusTags
										</ref>
										structure to initialize.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="458" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1ga42bc0321740b618271c4cd0ae076d29a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int opus_tags_add
				</definition>
				<argsstring>
					(OpusTags *_tags, const char *_tag, const char *_value) OP_ARG_NONNULL(1) OP_ARG_NONNULL(2) OP_ARG_NONNULL(3)
				</argsstring>
				<name>
					opus_tags_add
				</name>
				<param>
					<type>
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						*
					</type>
					<declname>
						_tags
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_tag
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_value
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Add a (tag, value) pair to an initialized
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						structure.
						<simplesect kind="note">
							<para>
								Neither
								<ref refid="group__header__info_1ga42bc0321740b618271c4cd0ae076d29a" kindref="member">
									opus_tags_add()
								</ref>
								nor
								<ref refid="group__header__info_1ga76ac5425d8c2ca9a994f84adfcc6cb98" kindref="member">
									opus_tags_add_comment()
								</ref>
								support values containing embedded NULs, although the bitstream format does support them. To add such tags, you will need to manipulate the
								<ref refid="struct_opus_tags" kindref="compound">
									OpusTags
								</ref>
								structure directly.
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tags
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="struct_opus_tags" kindref="compound">
											OpusTags
										</ref>
										structure to add the (tag, value) pair to.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tag
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A NUL-terminated, case-insensitive, ASCII string containing the tag to add (without an &apos;=&apos; character).
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_value
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A NUL-terminated UTF-8 containing the corresponding value.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								0 on success, or a negative value on failure.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An internal memory allocation failed.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="471" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1ga76ac5425d8c2ca9a994f84adfcc6cb98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int opus_tags_add_comment
				</definition>
				<argsstring>
					(OpusTags *_tags, const char *_comment) OP_ARG_NONNULL(1) OP_ARG_NONNULL(2)
				</argsstring>
				<name>
					opus_tags_add_comment
				</name>
				<param>
					<type>
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						*
					</type>
					<declname>
						_tags
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_comment
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Add a comment to an initialized
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						structure.
						<simplesect kind="note">
							<para>
								Neither
								<ref refid="group__header__info_1ga76ac5425d8c2ca9a994f84adfcc6cb98" kindref="member">
									opus_tags_add_comment()
								</ref>
								nor
								<ref refid="group__header__info_1ga42bc0321740b618271c4cd0ae076d29a" kindref="member">
									opus_tags_add()
								</ref>
								support comments containing embedded NULs, although the bitstream format does support them. To add such tags, you will need to manipulate the
								<ref refid="struct_opus_tags" kindref="compound">
									OpusTags
								</ref>
								structure directly.
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tags
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="struct_opus_tags" kindref="compound">
											OpusTags
										</ref>
										structure to add the comment to.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_comment
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A NUL-terminated UTF-8 string containing the comment in &quot;TAG=value&quot; form.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								0 on success, or a negative value on failure.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An internal memory allocation failed.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="484" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1gad43a7ed5844debd7d4025335f096bc27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					const char *
				</type>
				<definition>
					const char* opus_tags_query
				</definition>
				<argsstring>
					(const OpusTags *_tags, const char *_tag, int _count) OP_ARG_NONNULL(1) OP_ARG_NONNULL(2)
				</argsstring>
				<name>
					opus_tags_query
				</name>
				<param>
					<type>
						const
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						*
					</type>
					<declname>
						_tags
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_tag
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_count
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Look up a comment value by its tag.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tags
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An initialized
										<ref refid="struct_opus_tags" kindref="compound">
											OpusTags
										</ref>
										structure.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tag
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The tag to look up.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_count
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The instance of the tag. The same tag can appear multiple times, each with a distinct value, so an index is required to retrieve them all. The order in which these values appear is significant and should be preserved. Use
										<ref refid="group__header__info_1ga6e0bbe5a717115180bf4aa596bd0b2d1" kindref="member">
											opus_tags_query_count()
										</ref>
										to get the legal range for the
										<emphasis>
											_count
										</emphasis>
										parameter.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A pointer to the queried tag&apos;s value. This points directly to data in the
								<ref refid="struct_opus_tags" kindref="compound">
									OpusTags
								</ref>
								structure. It should not be modified or freed by the application, and modifications to the structure may invalidate the pointer.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										NULL
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										If no matching tag is found.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="502" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1ga6e0bbe5a717115180bf4aa596bd0b2d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int opus_tags_query_count
				</definition>
				<argsstring>
					(const OpusTags *_tags, const char *_tag) OP_ARG_NONNULL(1) OP_ARG_NONNULL(2)
				</argsstring>
				<name>
					opus_tags_query_count
				</name>
				<param>
					<type>
						const
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						*
					</type>
					<declname>
						_tags
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_tag
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Look up the number of instances of a tag. Call this first when querying for a specific tag and then iterate over the number of instances with separate calls to
						<ref refid="group__header__info_1gad43a7ed5844debd7d4025335f096bc27" kindref="member">
							opus_tags_query()
						</ref>
						to retrieve all the values for that tag in order.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tags
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An initialized
										<ref refid="struct_opus_tags" kindref="compound">
											OpusTags
										</ref>
										structure.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tag
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The tag to look up.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The number of instances of this particular tag.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="512" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1ga093ce83b90c68951f2e6aedc66344ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int opus_tags_get_track_gain
				</definition>
				<argsstring>
					(const OpusTags *_tags, int *_gain_q8) OP_ARG_NONNULL(1) OP_ARG_NONNULL(2)
				</argsstring>
				<name>
					opus_tags_get_track_gain
				</name>
				<param>
					<type>
						const
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						*
					</type>
					<declname>
						_tags
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_gain_q8
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Get the track gain from an R128_TRACK_GAIN tag, if one was specified. This searches for the first R128_TRACK_GAIN tag with a valid signed, 16-bit decimal integer value and returns the value. This routine is exposed merely for convenience for applications which wish to do something special with the track gain (i.e., display it). If you simply wish to apply the track gain instead of the header gain, you can use
						<ref refid="group__stream__decoding_1ga7df927613ccf57996319678e08513289" kindref="member">
							op_set_gain_offset()
						</ref>
						with an
						<ref refid="group__stream__decoding_1ga51082f7c661488bce9bfdf0e5401fabf" kindref="member">
							OP_TRACK_GAIN
						</ref>
						type and no offset.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tags
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An initialized
										<ref refid="struct_opus_tags" kindref="compound">
											OpusTags
										</ref>
										structure.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_gain_q8
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The track gain, in 1/256ths of a dB. This will lie in the range [-32768,32767], and should be applied in
										<emphasis>
											addition
										</emphasis>
										to the header gain. On error, no value is returned, and the previous contents remain unchanged.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								0 on success, or a negative value on error.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga4fd28e64a5cbe5e0ba163916199611a5" kindref="member">
											OP_FALSE
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										There was no track gain available in the given tags.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="530" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1ga16d4f85561a965d56e0c5177fa129c35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					void
				</type>
				<definition>
					void opus_tags_clear
				</definition>
				<argsstring>
					(OpusTags *_tags) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					opus_tags_clear
				</name>
				<param>
					<type>
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						*
					</type>
					<declname>
						_tags
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Clears the
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						structure. This should be called on an
						<ref refid="struct_opus_tags" kindref="compound">
							OpusTags
						</ref>
						structure after it is no longer needed. It will free all memory used by the structure members.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tags
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="struct_opus_tags" kindref="compound">
											OpusTags
										</ref>
										structure to clear.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="538" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1gaad7582aee9be320d26b13f77e7b54106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int opus_tagcompare
				</definition>
				<argsstring>
					(const char *_tag_name, const char *_comment)
				</argsstring>
				<name>
					opus_tagcompare
				</name>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_tag_name
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_comment
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Check if
						<emphasis>
							_comment
						</emphasis>
						is an instance of a
						<emphasis>
							_tag_name
						</emphasis>
						tag.
						<simplesect kind="see">
							<para>
								<ref refid="group__header__info_1gabf02fa65e49fde045ef787e42ef7b8c0" kindref="member">
									opus_tagncompare
								</ref>
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tag_name
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A NUL-terminated, case-insensitive, ASCII string containing the name of the tag to check for (without the terminating &apos;=&apos; character).
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_comment
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The comment string to check.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								An integer less than, equal to, or greater than zero if
								<emphasis>
									_comment
								</emphasis>
								is found respectively, to be less than, to match, or be greater than a &quot;tag=value&quot; string whose tag matches
								<emphasis>
									_tag_name
								</emphasis>
								.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="549" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1gabf02fa65e49fde045ef787e42ef7b8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int opus_tagncompare
				</definition>
				<argsstring>
					(const char *_tag_name, int _tag_len, const char *_comment)
				</argsstring>
				<name>
					opus_tagncompare
				</name>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_tag_name
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_tag_len
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_comment
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Check if
						<emphasis>
							_comment
						</emphasis>
						is an instance of a
						<emphasis>
							_tag_name
						</emphasis>
						tag. This version is slightly more efficient than
						<ref refid="group__header__info_1gaad7582aee9be320d26b13f77e7b54106" kindref="member">
							opus_tagcompare()
						</ref>
						if the length of the tag name is already known (e.g., because it is a constant).
						<simplesect kind="see">
							<para>
								<ref refid="group__header__info_1gaad7582aee9be320d26b13f77e7b54106" kindref="member">
									opus_tagcompare
								</ref>
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tag_name
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A case-insensitive ASCII string containing the name of the tag to check for (without the terminating &apos;=&apos; character).
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tag_len
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of characters in the tag name. This must be non-negative.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_comment
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The comment string to check.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								An integer less than, equal to, or greater than zero if
								<emphasis>
									_comment
								</emphasis>
								is found respectively, to be less than, to match, or be greater than a &quot;tag=value&quot; string whose tag matches the first
								<emphasis>
									_tag_len
								</emphasis>
								characters of
								<emphasis>
									_tag_name
								</emphasis>
								.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="564" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1ga6487af1d21fe87f4815567d85a27989a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT int
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT int opus_picture_tag_parse
				</definition>
				<argsstring>
					(OpusPictureTag *_pic, const char *_tag) OP_ARG_NONNULL(1) OP_ARG_NONNULL(2)
				</argsstring>
				<name>
					opus_picture_tag_parse
				</name>
				<param>
					<type>
						<ref refid="struct_opus_picture_tag" kindref="compound">
							OpusPictureTag
						</ref>
						*
					</type>
					<declname>
						_pic
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_tag
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Parse a single METADATA_BLOCK_PICTURE tag. This decodes the BASE64-encoded content of the tag and returns a structure with the MIME type, description, image parameters (if known), and the compressed image data. If the MIME type indicates the presence of an image format we recognize (JPEG, PNG, or GIF) and the actual image data contains the magic signature associated with that format, then the
						<ref refid="struct_opus_picture_tag_1aba2d71a09ecf0999cf5faf7c2276fb37" kindref="member">
							OpusPictureTag::format
						</ref>
						field will be set to the corresponding format. This is provided as a convenience to avoid requiring applications to parse the MIME type and/or do their own format detection for the commonly used formats. In this case, we also attempt to extract the image parameters directly from the image data (overriding any that were present in the tag, which the specification says applications are not meant to rely on). The application must still provide its own support for actually decoding the image data and, if applicable, retrieving that data from URLs.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_pic
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns the parsed picture data. No sanitation is done on the type, MIME type, or description fields, so these might return invalid values. The contents of this structure are left unmodified on failure.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_tag
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The METADATA_BLOCK_PICTURE tag contents. The leading &quot;METADATA_BLOCK_PICTURE=&quot; portion is optional, to allow the function to be used on either directly on the values in
										<ref refid="struct_opus_tags_1ad53d571bd8b23691089242e4e161358a" kindref="member">
											OpusTags::user_comments
										</ref>
										or on the return value of
										<ref refid="group__header__info_1gad43a7ed5844debd7d4025335f096bc27" kindref="member">
											opus_tags_query()
										</ref>
										.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								0 on success or a negative value on error.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">
											OP_ENOTFORMAT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The METADATA_BLOCK_PICTURE contents were not valid.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										There was not enough memory to store the picture tag contents.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="596" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1ga09b9724bb7a9abd1d78680bd7d420ec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					void
				</type>
				<definition>
					void opus_picture_tag_init
				</definition>
				<argsstring>
					(OpusPictureTag *_pic) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					opus_picture_tag_init
				</name>
				<param>
					<type>
						<ref refid="struct_opus_picture_tag" kindref="compound">
							OpusPictureTag
						</ref>
						*
					</type>
					<declname>
						_pic
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Initializes an
						<ref refid="struct_opus_picture_tag" kindref="compound">
							OpusPictureTag
						</ref>
						structure. This should be called on a freshly allocated
						<ref refid="struct_opus_picture_tag" kindref="compound">
							OpusPictureTag
						</ref>
						structure before attempting to use it.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_pic
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="struct_opus_picture_tag" kindref="compound">
											OpusPictureTag
										</ref>
										structure to initialize.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="603" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__header__info_1ga26a732722fc74274d76b855020822852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					void
				</type>
				<definition>
					void opus_picture_tag_clear
				</definition>
				<argsstring>
					(OpusPictureTag *_pic) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					opus_picture_tag_clear
				</name>
				<param>
					<type>
						<ref refid="struct_opus_picture_tag" kindref="compound">
							OpusPictureTag
						</ref>
						*
					</type>
					<declname>
						_pic
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Clears the
						<ref refid="struct_opus_picture_tag" kindref="compound">
							OpusPictureTag
						</ref>
						structure. This should be called on an
						<ref refid="struct_opus_picture_tag" kindref="compound">
							OpusPictureTag
						</ref>
						structure after it is no longer needed. It will free all memory used by the structure members.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_pic
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="struct_opus_picture_tag" kindref="compound">
											OpusPictureTag
										</ref>
										structure to clear.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="610" column="1" />
			</memberdef>
		</sectiondef>
		<sectiondef kind="user-defined">
			<header>
				URL reading options
			</header>
			<description>
				<para>
					Options for
					<ref refid="group__stream__callbacks_1ga5c588fac7542057282b50a5bd2dbb35a" kindref="member">
						op_url_stream_create()
					</ref>
					and associated functions. These allow you to provide proxy configuration parameters, skip SSL certificate checks, etc. Options are processed in order, and if the same option is passed multiple times, only the value specified by the last occurrence has an effect (unless otherwise specified). They may be expanded in the future.
				</para>
			</description>
			<memberdef kind="define" id="group__url__options_1ga71080150b55e223be2710a0307108b72" prot="public" static="no">
				<name>
					OP_SSL_SKIP_CERTIFICATE_CHECK
				</name>
				<param>
					<defname>
						_b
					</defname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Skip the certificate check when connecting via TLS/SSL (https).
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_b
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										<computeroutput>
											opus_int32
										</computeroutput>
										: Whether or not to skip the certificate check. The check will be skipped if
										<emphasis>
											_b
										</emphasis>
										is non-zero, and will not be skipped if
										<emphasis>
											_b
										</emphasis>
										is zero.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="710" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="710" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__url__options_1gab3b517acdb74c0d0b51800af86a58876" prot="public" static="no">
				<name>
					OP_HTTP_PROXY_HOST
				</name>
				<param>
					<defname>
						_host
					</defname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Proxy connections through the given host. If no port is specified via
						<ref refid="group__url__options_1ga838d23878f4135691684203baa75ed0c" kindref="member">
							OP_HTTP_PROXY_PORT
						</ref>
						, the port number defaults to 8080 (http-alt). All proxy parameters are ignored for non-http and non-https URLs.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_host
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										<computeroutput>
											const char *
										</computeroutput>
										: The proxy server hostname. This may be
										<computeroutput>
											NULL
										</computeroutput>
										to disable the use of a proxy server.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="721" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="721" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__url__options_1ga838d23878f4135691684203baa75ed0c" prot="public" static="no">
				<name>
					OP_HTTP_PROXY_PORT
				</name>
				<param>
					<defname>
						_port
					</defname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Use the given port when proxying connections. This option only has an effect if
						<ref refid="group__url__options_1gab3b517acdb74c0d0b51800af86a58876" kindref="member">
							OP_HTTP_PROXY_HOST
						</ref>
						is specified with a non-
						<computeroutput>
							NULL
						</computeroutput>
						<emphasis>
							_host
						</emphasis>
						. If this option is not provided, the proxy port number defaults to 8080 (http-alt). All proxy parameters are ignored for non-http and non-https URLs.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_port
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										<computeroutput>
											opus_int32
										</computeroutput>
										: The proxy server port. This must be in the range 0...65535 (inclusive), or the URL function this is passed to will fail.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="734" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="734" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__url__options_1gaf0ce8d761ff48697fa0c44a62a445842" prot="public" static="no">
				<name>
					OP_HTTP_PROXY_USER
				</name>
				<param>
					<defname>
						_user
					</defname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Use the given user name for authentication when proxying connections. All proxy parameters are ignored for non-http and non-https URLs.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_user
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										const char *: The proxy server user name. This may be
										<computeroutput>
											NULL
										</computeroutput>
										to disable proxy authentication. A non-
										<computeroutput>
											NULL
										</computeroutput>
										value only has an effect if
										<ref refid="group__url__options_1gab3b517acdb74c0d0b51800af86a58876" kindref="member">
											OP_HTTP_PROXY_HOST
										</ref>
										and
										<ref refid="group__url__options_1gaad96c33557407e406cca89477b2e7892" kindref="member">
											OP_HTTP_PROXY_PASS
										</ref>
										are also specified with non-
										<computeroutput>
											NULL
										</computeroutput>
										arguments.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="747" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="747" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__url__options_1gaad96c33557407e406cca89477b2e7892" prot="public" static="no">
				<name>
					OP_HTTP_PROXY_PASS
				</name>
				<param>
					<defname>
						_pass
					</defname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Use the given password for authentication when proxying connections. All proxy parameters are ignored for non-http and non-https URLs.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_pass
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										const char *: The proxy server password. This may be
										<computeroutput>
											NULL
										</computeroutput>
										to disable proxy authentication. A non-
										<computeroutput>
											NULL
										</computeroutput>
										value only has an effect if
										<ref refid="group__url__options_1gab3b517acdb74c0d0b51800af86a58876" kindref="member">
											OP_HTTP_PROXY_HOST
										</ref>
										and
										<ref refid="group__url__options_1gaf0ce8d761ff48697fa0c44a62a445842" kindref="member">
											OP_HTTP_PROXY_USER
										</ref>
										are also specified with non-
										<computeroutput>
											NULL
										</computeroutput>
										arguments.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="760" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="760" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__url__options_1gacc2e4b086bee832d5d66caf18fd7d659" prot="public" static="no">
				<name>
					OP_GET_SERVER_INFO
				</name>
				<param>
					<defname>
						_info
					</defname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Parse information about the streaming server (if any) and return it. Very little validation is done. In particular,
						<ref refid="struct_opus_server_info_1a7f9aef47413c849bb240ef70394401b1" kindref="member">
							OpusServerInfo::url
						</ref>
						may not be a valid URL,
						<ref refid="struct_opus_server_info_1a1cf5db210f1cad5cf809bf54ddff68de" kindref="member">
							OpusServerInfo::bitrate_kbps
						</ref>
						may not really be in kbps, and
						<ref refid="struct_opus_server_info_1a5f0120b006af1122cbdc72f3cbb68fd7" kindref="member">
							OpusServerInfo::content_type
						</ref>
						may not be a valid MIME type. The character set of the string fields is not specified anywhere, and should not be assumed to be valid UTF-8.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_info
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										<ref refid="struct_opus_server_info" kindref="compound">
											OpusServerInfo
										</ref>
										*: Returns information about the server. If there is any error opening the stream, the contents of this structure remain unmodified. On success, fills in the structure with the server information that was available, if any. After a successful return, the contents of this structure should be freed by calling
										<ref refid="group__url__options_1ga096536e460277fe890acb265d8fdbd63" kindref="member">
											opus_server_info_clear()
										</ref>
										.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="781" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="781" bodyend="-1" />
			</memberdef>
			<memberdef kind="function" id="group__url__options_1ga8a8c97266e46504e064bba1a70495738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					void
				</type>
				<definition>
					void opus_server_info_init
				</definition>
				<argsstring>
					(OpusServerInfo *_info) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					opus_server_info_init
				</name>
				<param>
					<type>
						<ref refid="struct_opus_server_info" kindref="compound">
							OpusServerInfo
						</ref>
						*
					</type>
					<declname>
						_info
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Initializes an
						<ref refid="struct_opus_server_info" kindref="compound">
							OpusServerInfo
						</ref>
						structure. All fields are set as if the corresponding header was not available.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_info
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="struct_opus_server_info" kindref="compound">
											OpusServerInfo
										</ref>
										structure to initialize.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="note">
							<para>
								If you use this function, you must link against
								<computeroutput>
									libopusurl
								</computeroutput>
								.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="694" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__url__options_1ga096536e460277fe890acb265d8fdbd63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					void
				</type>
				<definition>
					void opus_server_info_clear
				</definition>
				<argsstring>
					(OpusServerInfo *_info) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					opus_server_info_clear
				</name>
				<param>
					<type>
						<ref refid="struct_opus_server_info" kindref="compound">
							OpusServerInfo
						</ref>
						*
					</type>
					<declname>
						_info
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Clears the
						<ref refid="struct_opus_server_info" kindref="compound">
							OpusServerInfo
						</ref>
						structure. This should be called on an
						<ref refid="struct_opus_server_info" kindref="compound">
							OpusServerInfo
						</ref>
						structure after it is no longer needed. It will free all memory used by the structure members.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_info
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="struct_opus_server_info" kindref="compound">
											OpusServerInfo
										</ref>
										structure to clear.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="note">
							<para>
								If you use this function, you must link against
								<computeroutput>
									libopusurl
								</computeroutput>
								.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="702" column="1" />
			</memberdef>
		</sectiondef>
		<sectiondef kind="user-defined">
			<header>
				Functions for reading from streams
			</header>
			<description>
				<para>
					These functions define the interface used to read from and seek in a stream of data. A stream does not need to implement seeking, but the decoder will not be able to seek if it does not do so. These functions also include some convenience routines for working with standard
					<computeroutput>
						FILE
					</computeroutput>
					pointers, complete streams stored in a single block of memory, or URLs.
				</para>
			</description>
			<memberdef kind="typedef" id="group__stream__callbacks_1ga9ffca429db1f3b77f2f303f1942188c3" prot="public" static="no">
				<type>
					int(*
				</type>
				<definition>
					typedef int(* op_read_func) (void *_stream, unsigned char *_ptr, int _nbytes)
				</definition>
				<argsstring>
					)(void *_stream, unsigned char *_ptr, int _nbytes)
				</argsstring>
				<name>
					op_read_func
				</name>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Reads up to
						<emphasis>
							_nbytes
						</emphasis>
						bytes of data from
						<emphasis>
							_stream
						</emphasis>
						.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_stream
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream to read from.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_ptr
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The buffer to store the data in.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_nbytes
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The maximum number of bytes to read. This function may return fewer, though it will not return zero unless it reaches end-of-file.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The number of bytes successfully read, or a negative value on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="807" column="1" bodyfile="includes/personnal/opusfile.h" bodystart="807" bodyend="-1" />
			</memberdef>
			<memberdef kind="typedef" id="group__stream__callbacks_1gae57cb396d1f193d3f4e7e56ddad7760e" prot="public" static="no">
				<type>
					int(*
				</type>
				<definition>
					typedef int(* op_seek_func) (void *_stream, opus_int64 _offset, int _whence)
				</definition>
				<argsstring>
					)(void *_stream, opus_int64 _offset, int _whence)
				</argsstring>
				<name>
					op_seek_func
				</name>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Sets the position indicator for
						<emphasis>
							_stream
						</emphasis>
						. The new position, measured in bytes, is obtained by adding
						<emphasis>
							_offset
						</emphasis>
						bytes to the position specified by
						<emphasis>
							_whence
						</emphasis>
						. If
						<emphasis>
							_whence
						</emphasis>
						is set to
						<computeroutput>
							SEEK_SET
						</computeroutput>
						,
						<computeroutput>
							SEEK_CUR
						</computeroutput>
						, or
						<computeroutput>
							SEEK_END
						</computeroutput>
						, the offset is relative to the start of the stream, the current position indicator, or end-of-file, respectively.
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										0
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Success.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										-1
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Seeking is not supported or an error occurred.
										<computeroutput>
											errno
										</computeroutput>
										need not be set.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="818" column="1" bodyfile="includes/personnal/opusfile.h" bodystart="818" bodyend="-1" />
			</memberdef>
			<memberdef kind="typedef" id="group__stream__callbacks_1gaca012812dea4bc3a27b0c23575efecaf" prot="public" static="no">
				<type>
					opus_int64(*
				</type>
				<definition>
					typedef opus_int64(* op_tell_func) (void *_stream)
				</definition>
				<argsstring>
					)(void *_stream)
				</argsstring>
				<name>
					op_tell_func
				</name>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Obtains the current value of the position indicator for
						<emphasis>
							_stream
						</emphasis>
						.
						<simplesect kind="return">
							<para>
								The current position indicator.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="822" column="1" bodyfile="includes/personnal/opusfile.h" bodystart="822" bodyend="-1" />
			</memberdef>
			<memberdef kind="typedef" id="group__stream__callbacks_1ga16c914ec90d301f125cdbeaa1ff57c2d" prot="public" static="no">
				<type>
					int(*
				</type>
				<definition>
					typedef int(* op_close_func) (void *_stream)
				</definition>
				<argsstring>
					)(void *_stream)
				</argsstring>
				<name>
					op_close_func
				</name>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Closes the underlying stream.
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										0
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Success.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										EOF
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An error occurred.
										<computeroutput>
											errno
										</computeroutput>
										need not be set.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="828" column="1" bodyfile="includes/personnal/opusfile.h" bodystart="828" bodyend="-1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__callbacks_1ga8b3714e33b1459b43445b99b55cbe75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT void *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT void* op_fopen
				</definition>
				<argsstring>
					(OpusFileCallbacks *_cb, const char *_path, const char *_mode) OP_ARG_NONNULL(1) OP_ARG_NONNULL(2) OP_ARG_NONNULL(3)
				</argsstring>
				<name>
					op_fopen
				</name>
				<param>
					<type>
						<ref refid="struct_opus_file_callbacks" kindref="compound">
							OpusFileCallbacks
						</ref>
						*
					</type>
					<declname>
						_cb
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_path
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_mode
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Opens a stream with
						<computeroutput>
							fopen()
						</computeroutput>
						and fills in a set of callbacks that can be used to access it. This is useful to avoid writing your own portable 64-bit seeking wrappers, and also avoids cross-module linking issues on Windows, where a
						<computeroutput>
							FILE *
						</computeroutput>
						must be accessed by routines defined in the same module that opened it.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_cb
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The callbacks to use for this file. If there is an error opening the file, nothing will be filled in here.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_path
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The path to the file to open. On Windows, this string must be UTF-8 (to allow access to files whose names cannot be represented in the current MBCS code page). All other systems use the native character encoding.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_mode
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The mode to open the file in.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A stream handle to use with the callbacks, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="871" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__callbacks_1gac1843b587e14570e616f8cc7c4501961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT void *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT void* op_fdopen
				</definition>
				<argsstring>
					(OpusFileCallbacks *_cb, int _fd, const char *_mode) OP_ARG_NONNULL(1) OP_ARG_NONNULL(3)
				</argsstring>
				<name>
					op_fdopen
				</name>
				<param>
					<type>
						<ref refid="struct_opus_file_callbacks" kindref="compound">
							OpusFileCallbacks
						</ref>
						*
					</type>
					<declname>
						_cb
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_fd
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_mode
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Opens a stream with
						<computeroutput>
							fdopen()
						</computeroutput>
						and fills in a set of callbacks that can be used to access it. This is useful to avoid writing your own portable 64-bit seeking wrappers, and also avoids cross-module linking issues on Windows, where a
						<computeroutput>
							FILE *
						</computeroutput>
						must be accessed by routines defined in the same module that opened it.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_cb
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The callbacks to use for this file. If there is an error opening the file, nothing will be filled in here.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_fd
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The file descriptor to open.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_mode
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The mode to open the file in.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A stream handle to use with the callbacks, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="888" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__callbacks_1gae63ceff71d9602c68f4db1c91b480fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT void *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT void* op_freopen
				</definition>
				<argsstring>
					(OpusFileCallbacks *_cb, const char *_path, const char *_mode, void *_stream) OP_ARG_NONNULL(1) OP_ARG_NONNULL(2) OP_ARG_NONNULL(3) OP_ARG_NONNULL(4)
				</argsstring>
				<name>
					op_freopen
				</name>
				<param>
					<type>
						<ref refid="struct_opus_file_callbacks" kindref="compound">
							OpusFileCallbacks
						</ref>
						*
					</type>
					<declname>
						_cb
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_path
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_mode
					</declname>
				</param>
				<param>
					<type>
						void *
					</type>
					<declname>
						_stream
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Opens a stream with
						<computeroutput>
							freopen()
						</computeroutput>
						and fills in a set of callbacks that can be used to access it. This is useful to avoid writing your own portable 64-bit seeking wrappers, and also avoids cross-module linking issues on Windows, where a
						<computeroutput>
							FILE *
						</computeroutput>
						must be accessed by routines defined in the same module that opened it.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_cb
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The callbacks to use for this file. If there is an error opening the file, nothing will be filled in here.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_path
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The path to the file to open. On Windows, this string must be UTF-8 (to allow access to files whose names cannot be represented in the current MBCS code page). All other systems use the native character encoding.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_mode
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The mode to open the file in.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_stream
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A stream previously returned by
										<ref refid="group__stream__callbacks_1ga8b3714e33b1459b43445b99b55cbe75f" kindref="member">
											op_fopen()
										</ref>
										,
										<ref refid="group__stream__callbacks_1gac1843b587e14570e616f8cc7c4501961" kindref="member">
											op_fdopen()
										</ref>
										, or
										<ref refid="group__stream__callbacks_1gae63ceff71d9602c68f4db1c91b480fde" kindref="member">
											op_freopen()
										</ref>
										.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A stream handle to use with the callbacks, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="910" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__callbacks_1ga83231f1733af83c7940b0262f1a1ffb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT void *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT void* op_mem_stream_create
				</definition>
				<argsstring>
					(OpusFileCallbacks *_cb, const unsigned char *_data, size_t _size) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_mem_stream_create
				</name>
				<param>
					<type>
						<ref refid="struct_opus_file_callbacks" kindref="compound">
							OpusFileCallbacks
						</ref>
						*
					</type>
					<declname>
						_cb
					</declname>
				</param>
				<param>
					<type>
						const unsigned char *
					</type>
					<declname>
						_data
					</declname>
				</param>
				<param>
					<type>
						size_t
					</type>
					<declname>
						_size
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Creates a stream that reads from the given block of memory. This block of memory must contain the complete stream to decode. This is useful for caching small streams (e.g., sound effects) in RAM.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_cb
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The callbacks to use for this stream. If there is an error creating the stream, nothing will be filled in here.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_data
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The block of memory to read from.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_size
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The size of the block of memory.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A stream handle to use with the callbacks, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="924" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__callbacks_1ga33bf9edd6949f8125456b2c8a1591010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT void *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT void* op_url_stream_vcreate
				</definition>
				<argsstring>
					(OpusFileCallbacks *_cb, const char *_url, va_list _ap) OP_ARG_NONNULL(1) OP_ARG_NONNULL(2)
				</argsstring>
				<name>
					op_url_stream_vcreate
				</name>
				<param>
					<type>
						<ref refid="struct_opus_file_callbacks" kindref="compound">
							OpusFileCallbacks
						</ref>
						*
					</type>
					<declname>
						_cb
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_url
					</declname>
				</param>
				<param>
					<type>
						va_list
					</type>
					<declname>
						_ap
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Creates a stream that reads from the given URL. This function behaves identically to
						<ref refid="group__stream__callbacks_1ga5c588fac7542057282b50a5bd2dbb35a" kindref="member">
							op_url_stream_create()
						</ref>
						, except that it takes a va_list instead of a variable number of arguments. It does not call the
						<computeroutput>
							va_end
						</computeroutput>
						macro, and because it invokes the
						<computeroutput>
							va_arg
						</computeroutput>
						macro, the value of
						<emphasis>
							_ap
						</emphasis>
						is undefined after the call.
						<simplesect kind="note">
							<para>
								If you use this function, you must link against
								<computeroutput>
									libopusurl
								</computeroutput>
								.
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_cb
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The callbacks to use for this stream. If there is an error creating the stream, nothing will be filled in here.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_url
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The URL to read from. Currently only the &lt;file:&gt;, &lt;http:&gt;, and &lt;https:&gt; schemes are supported. Both &lt;http:&gt; and &lt;https:&gt; may be disabled at compile time, in which case opening such URLs will always fail. Currently this only supports URIs. IRIs should be converted to UTF-8 and URL-escaped, with internationalized domain names encoded in punycode, before passing them to this function.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="inout">
										_ap
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A list of the
										<ref refid="group__url__options" kindref="compound">
											optional flags
										</ref>
										to use. This is a variable-length list of options terminated with
										<computeroutput>
											NULL
										</computeroutput>
										.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A stream handle to use with the callbacks, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="950" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__callbacks_1ga5c588fac7542057282b50a5bd2dbb35a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT void *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT void* op_url_stream_create
				</definition>
				<argsstring>
					(OpusFileCallbacks *_cb, const char *_url,...) OP_ARG_NONNULL(1) OP_ARG_NONNULL(2)
				</argsstring>
				<name>
					op_url_stream_create
				</name>
				<param>
					<type>
						<ref refid="struct_opus_file_callbacks" kindref="compound">
							OpusFileCallbacks
						</ref>
						*
					</type>
					<declname>
						_cb
					</declname>
				</param>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_url
					</declname>
				</param>
				<param>
					<type>
						...
					</type>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Creates a stream that reads from the given URL.
						<simplesect kind="note">
							<para>
								If you use this function, you must link against
								<computeroutput>
									libopusurl
								</computeroutput>
								.
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_cb
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The callbacks to use for this stream. If there is an error creating the stream, nothing will be filled in here.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_url
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The URL to read from. Currently only the &lt;file:&gt;, &lt;http:&gt;, and &lt;https:&gt; schemes are supported. Both &lt;http:&gt; and &lt;https:&gt; may be disabled at compile time, in which case opening such URLs will always fail. Currently this only supports URIs. IRIs should be converted to UTF-8 and URL-escaped, with internationalized domain names encoded in punycode, before passing them to this function.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										...
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="group__url__options" kindref="compound">
											optional flags
										</ref>
										to use. This is a variable-length list of options terminated with
										<computeroutput>
											NULL
										</computeroutput>
										.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A stream handle to use with the callbacks, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="972" column="1" />
			</memberdef>
		</sectiondef>
		<sectiondef kind="user-defined">
			<header>
				Functions for opening and closing streams
			</header>
			<description>
				<para>
					These functions allow you to test a stream to see if it is Opus, open it, and close it. Several flavors are provided for each of the built-in stream types, plus a more general version which takes a set of application-provided callbacks.
				</para>
			</description>
			<memberdef kind="function" id="group__stream__open__close_1ga54158ed1570a0062cb674115cd3699ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int op_test
				</definition>
				<argsstring>
					(OpusHead *_head, const unsigned char *_initial_data, size_t _initial_bytes)
				</argsstring>
				<name>
					op_test
				</name>
				<param>
					<type>
						<ref refid="struct_opus_head" kindref="compound">
							OpusHead
						</ref>
						*
					</type>
					<declname>
						_head
					</declname>
				</param>
				<param>
					<type>
						const unsigned char *
					</type>
					<declname>
						_initial_data
					</declname>
				</param>
				<param>
					<type>
						size_t
					</type>
					<declname>
						_initial_bytes
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Test to see if this is an Opus stream. For good results, you will need at least 57 bytes (for a pure Opus-only stream). Something like 512 bytes will give more reliable results for multiplexed streams. This function is meant to be a quick-rejection filter. Its purpose is not to guarantee that a stream is a valid Opus stream, but to ensure that it looks enough like Opus that it isn&apos;t going to be recognized as some other format (except possibly an Opus stream that is also multiplexed with other codecs, such as video).
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_head
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The parsed ID header contents. You may pass
										<computeroutput>
											NULL
										</computeroutput>
										if you do not need this information. If the function fails, the contents of this structure remain untouched.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_initial_data
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An initial buffer of data from the start of the stream.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_initial_bytes
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of bytes in
										<emphasis>
											_initial_data
										</emphasis>
										.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								0 if the data appears to be Opus, or a negative value on error.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga4fd28e64a5cbe5e0ba163916199611a5" kindref="member">
											OP_FALSE
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										There was not enough data to tell if this was an Opus stream or not.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An internal memory allocation failed.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaeea27378f826033ca23584d8403665d3" kindref="member">
											OP_EIMPL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream used a feature that is not implemented, such as an unsupported channel family.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">
											OP_ENOTFORMAT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										If the data did not contain a recognizable ID header for an Opus stream.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" kindref="member">
											OP_EVERSION
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										If the version field signaled a version this library does not know how to parse.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">
											OP_EBADHEADER
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The ID header was not properly formatted or contained illegal values.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1017" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1ga15866bd0cd7ac77162db3b0428962e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT OggOpusFile *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT OggOpusFile* op_open_file
				</definition>
				<argsstring>
					(const char *_path, int *_error) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_open_file
				</name>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_path
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_error
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Open a stream from the given file path.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_path
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The path to the file to open.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_error
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns 0 on success, or a failure code on error. You may pass in
										<computeroutput>
											NULL
										</computeroutput>
										if you don&apos;t want the failure code. The failure code will be
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
										if the file could not be opened, or one of the other failure codes from
										<ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">
											op_open_callbacks()
										</ref>
										otherwise.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A freshly opened
								<computeroutput>
									OggOpusFile
								</computeroutput>
								, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1029" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1gaffc5769a1e5977f186f77a1fb08cb248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT OggOpusFile *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT OggOpusFile* op_open_memory
				</definition>
				<argsstring>
					(const unsigned char *_data, size_t _size, int *_error)
				</argsstring>
				<name>
					op_open_memory
				</name>
				<param>
					<type>
						const unsigned char *
					</type>
					<declname>
						_data
					</declname>
				</param>
				<param>
					<type>
						size_t
					</type>
					<declname>
						_size
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_error
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Open a stream from a memory buffer.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_data
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The memory buffer to open.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_size
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of bytes in the buffer.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_error
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns 0 on success, or a failure code on error. You may pass in
										<computeroutput>
											NULL
										</computeroutput>
										if you don&apos;t want the failure code. See
										<ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">
											op_open_callbacks()
										</ref>
										for a full list of failure codes.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A freshly opened
								<computeroutput>
									OggOpusFile
								</computeroutput>
								, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1040" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1ga9a0c2a744653a559b84a5be8f551fe8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT OggOpusFile *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT OggOpusFile* op_vopen_url
				</definition>
				<argsstring>
					(const char *_url, int *_error, va_list _ap) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_vopen_url
				</name>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_url
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_error
					</declname>
				</param>
				<param>
					<type>
						va_list
					</type>
					<declname>
						_ap
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Open a stream from a URL. This function behaves identically to
						<ref refid="group__stream__open__close_1gace8a90b60d492f3488ee3f14a7276ddf" kindref="member">
							op_open_url()
						</ref>
						, except that it takes a va_list instead of a variable number of arguments. It does not call the
						<computeroutput>
							va_end
						</computeroutput>
						macro, and because it invokes the
						<computeroutput>
							va_arg
						</computeroutput>
						macro, the value of
						<emphasis>
							_ap
						</emphasis>
						is undefined after the call.
						<simplesect kind="note">
							<para>
								If you use this function, you must link against
								<computeroutput>
									libopusurl
								</computeroutput>
								.
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_url
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The URL to open. Currently only the &lt;file:&gt;, &lt;http:&gt;, and &lt;https:&gt; schemes are supported. Both &lt;http:&gt; and &lt;https:&gt; may be disabled at compile time, in which case opening such URLs will always fail. Currently this only supports URIs. IRIs should be converted to UTF-8 and URL-escaped, with internationalized domain names encoded in punycode, before passing them to this function.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_error
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns 0 on success, or a failure code on error. You may pass in
										<computeroutput>
											NULL
										</computeroutput>
										if you don&apos;t want the failure code. See
										<ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">
											op_open_callbacks()
										</ref>
										for a full list of failure codes.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="inout">
										_ap
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A list of the
										<ref refid="group__url__options" kindref="compound">
											optional flags
										</ref>
										to use. This is a variable-length list of options terminated with
										<computeroutput>
											NULL
										</computeroutput>
										.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A freshly opened
								<computeroutput>
									OggOpusFile
								</computeroutput>
								, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1069" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1gace8a90b60d492f3488ee3f14a7276ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT OggOpusFile *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT OggOpusFile* op_open_url
				</definition>
				<argsstring>
					(const char *_url, int *_error,...) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_open_url
				</name>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_url
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_error
					</declname>
				</param>
				<param>
					<type>
						...
					</type>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Open a stream from a URL.
						<simplesect kind="note">
							<para>
								If you use this function, you must link against
								<computeroutput>
									libopusurl
								</computeroutput>
								.
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_url
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The URL to open. Currently only the &lt;file:&gt;, &lt;http:&gt;, and &lt;https:&gt; schemes are supported. Both &lt;http:&gt; and &lt;https:&gt; may be disabled at compile time, in which case opening such URLs will always fail. Currently this only supports URIs. IRIs should be converted to UTF-8 and URL-escaped, with internationalized domain names encoded in punycode, before passing them to this function.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_error
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns 0 on success, or a failure code on error. You may pass in
										<computeroutput>
											NULL
										</computeroutput>
										if you don&apos;t want the failure code. See
										<ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">
											op_open_callbacks()
										</ref>
										for a full list of failure codes.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										...
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="group__url__options" kindref="compound">
											optional flags
										</ref>
										to use. This is a variable-length list of options terminated with
										<computeroutput>
											NULL
										</computeroutput>
										.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A freshly opened
								<computeroutput>
									OggOpusFile
								</computeroutput>
								, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1091" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT OggOpusFile *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT OggOpusFile* op_open_callbacks
				</definition>
				<argsstring>
					(void *_source, const OpusFileCallbacks *_cb, const unsigned char *_initial_data, size_t _initial_bytes, int *_error) OP_ARG_NONNULL(2)
				</argsstring>
				<name>
					op_open_callbacks
				</name>
				<param>
					<type>
						void *
					</type>
					<declname>
						_source
					</declname>
				</param>
				<param>
					<type>
						const
						<ref refid="struct_opus_file_callbacks" kindref="compound">
							OpusFileCallbacks
						</ref>
						*
					</type>
					<declname>
						_cb
					</declname>
				</param>
				<param>
					<type>
						const unsigned char *
					</type>
					<declname>
						_initial_data
					</declname>
				</param>
				<param>
					<type>
						size_t
					</type>
					<declname>
						_initial_bytes
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_error
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Open a stream using the given set of callbacks to access it.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_source
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream to read from (e.g., a
										<computeroutput>
											FILE *
										</computeroutput>
										).
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_cb
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The callbacks with which to access the stream.
										<computeroutput>
											<ulink url="#op_read_func">
												read()
											</ulink>
										</computeroutput>
										must be implemented.
										<computeroutput>
											<ulink url="#op_seek_func">
												seek()
											</ulink>
										</computeroutput>
										and
										<computeroutput>
											<ulink url="#op_tell_func">
												tell()
											</ulink>
										</computeroutput>
										may be
										<computeroutput>
											NULL
										</computeroutput>
										, or may always return -1 to indicate a source is unseekable, but if
										<computeroutput>
											<ulink url="#op_seek_func">
												seek()
											</ulink>
										</computeroutput>
										is implemented and succeeds on a particular source, then
										<computeroutput>
											<ulink url="#op_tell_func">
												tell()
											</ulink>
										</computeroutput>
										must also.
										<computeroutput>
											<ulink url="#op_close_func">
												close()
											</ulink>
										</computeroutput>
										may be
										<computeroutput>
											NULL
										</computeroutput>
										, but if it is not, it will be called when the
										<computeroutput>
											OggOpusFile
										</computeroutput>
										is destroyed by
										<ref refid="group__stream__open__close_1gaf494ef9aa761647d8167c49507560d1c" kindref="member">
											op_free()
										</ref>
										. It will not be called if
										<ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">
											op_open_callbacks()
										</ref>
										fails with an error.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_initial_data
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An initial buffer of data from the start of the stream. Applications can read some number of bytes from the start of the stream to help identify this as an Opus stream, and then provide them here to allow the stream to be opened, even if it is unseekable.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_initial_bytes
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of bytes in
										<emphasis>
											_initial_data
										</emphasis>
										. If the stream is seekable, its current position (as reported by
										<computeroutput>
											<ulink url="#opus_tell_func">
												tell()
											</ulink>
										</computeroutput>
										at the start of this function) must be equal to
										<emphasis>
											_initial_bytes
										</emphasis>
										. Otherwise, seeking to absolute positions will generate inconsistent results.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_error
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns 0 on success, or a failure code on error. You may pass in
										<computeroutput>
											NULL
										</computeroutput>
										if you don&apos;t want the failure code. The failure code will be one of
										<variablelist>
											<varlistentry>
												<term>
													<ref refid="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" kindref="member">
														OP_EREAD
													</ref>
												</term>
											</varlistentry>
											<listitem>
												<para>
													An underlying read, seek, or tell operation failed when it should have succeeded, or we failed to find data in the stream we had seen before.
												</para>
											</listitem>
											<varlistentry>
												<term>
													<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
														OP_EFAULT
													</ref>
												</term>
											</varlistentry>
											<listitem>
												<para>
													There was a memory allocation failure, or an internal library error.
												</para>
											</listitem>
											<varlistentry>
												<term>
													<ref refid="group__error__codes_1gaeea27378f826033ca23584d8403665d3" kindref="member">
														OP_EIMPL
													</ref>
												</term>
											</varlistentry>
											<listitem>
												<para>
													The stream used a feature that is not implemented, such as an unsupported channel family.
												</para>
											</listitem>
											<varlistentry>
												<term>
													<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
														OP_EINVAL
													</ref>
												</term>
											</varlistentry>
											<listitem>
												<para>
													<computeroutput>
														<ulink url="#op_seek_func">
															seek()
														</ulink>
													</computeroutput>
													was implemented and succeeded on this source, but
													<computeroutput>
														<ulink url="#op_tell_func">
															tell()
														</ulink>
													</computeroutput>
													did not, or the starting position indicator was not equal to
													<emphasis>
														_initial_bytes
													</emphasis>
													.
												</para>
											</listitem>
											<varlistentry>
												<term>
													<ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">
														OP_ENOTFORMAT
													</ref>
												</term>
											</varlistentry>
											<listitem>
												<para>
													The stream contained a link that did not have any logical Opus streams in it.
												</para>
											</listitem>
											<varlistentry>
												<term>
													<ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">
														OP_EBADHEADER
													</ref>
												</term>
											</varlistentry>
											<listitem>
												<para>
													A required header packet was not properly formatted, contained illegal values, or was missing altogether.
												</para>
											</listitem>
											<varlistentry>
												<term>
													<ref refid="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" kindref="member">
														OP_EVERSION
													</ref>
												</term>
											</varlistentry>
											<listitem>
												<para>
													An ID header contained an unrecognized version number.
												</para>
											</listitem>
											<varlistentry>
												<term>
													<ref refid="group__error__codes_1gaf7b58a439a471366e9eb5b8f2a8cd041" kindref="member">
														OP_EBADLINK
													</ref>
												</term>
											</varlistentry>
											<listitem>
												<para>
													We failed to find data we had seen before after seeking.
												</para>
											</listitem>
											<varlistentry>
												<term>
													<ref refid="group__error__codes_1gaf82657fc888f1dcf2e0d8f066b8a6cc7" kindref="member">
														OP_EBADTIMESTAMP
													</ref>
												</term>
											</varlistentry>
											<listitem>
												<para>
													The first or last timestamp in a link failed basic validity checks.
												</para>
											</listitem>
										</variablelist>
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A freshly opened
								<computeroutput>
									OggOpusFile
								</computeroutput>
								, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
								<computeroutput>
									libopusfile
								</computeroutput>
								does
								<emphasis>
									not
								</emphasis>
								take ownership of the source if the call fails. The calling application is responsible for closing the source if this call returns an error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1171" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1ga3b12533b35cd3ac0d273c1e0efa35b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT OggOpusFile *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT OggOpusFile* op_test_file
				</definition>
				<argsstring>
					(const char *_path, int *_error) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_test_file
				</name>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_path
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_error
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Partially open a stream from the given file path.
						<simplesect kind="see">
							<para>
								<ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">
									op_test_callbacks
								</ref>
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_path
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The path to the file to open.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_error
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns 0 on success, or a failure code on error. You may pass in
										<computeroutput>
											NULL
										</computeroutput>
										if you don&apos;t want the failure code. The failure code will be
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
										if the file could not be opened, or one of the other failure codes from
										<ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">
											op_open_callbacks()
										</ref>
										otherwise.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A partially opened
								<computeroutput>
									OggOpusFile
								</computeroutput>
								, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1185" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1gae093e19e16871f4cb53532fe1f0c1039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT OggOpusFile *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT OggOpusFile* op_test_memory
				</definition>
				<argsstring>
					(const unsigned char *_data, size_t _size, int *_error)
				</argsstring>
				<name>
					op_test_memory
				</name>
				<param>
					<type>
						const unsigned char *
					</type>
					<declname>
						_data
					</declname>
				</param>
				<param>
					<type>
						size_t
					</type>
					<declname>
						_size
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_error
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Partially open a stream from a memory buffer.
						<simplesect kind="see">
							<para>
								<ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">
									op_test_callbacks
								</ref>
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_data
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The memory buffer to open.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_size
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of bytes in the buffer.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_error
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns 0 on success, or a failure code on error. You may pass in
										<computeroutput>
											NULL
										</computeroutput>
										if you don&apos;t want the failure code. See
										<ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">
											op_open_callbacks()
										</ref>
										for a full list of failure codes.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A partially opened
								<computeroutput>
									OggOpusFile
								</computeroutput>
								, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1197" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1ga93b438960ec52e13e7c77446f754d016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT OggOpusFile *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT OggOpusFile* op_vtest_url
				</definition>
				<argsstring>
					(const char *_url, int *_error, va_list _ap) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_vtest_url
				</name>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_url
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_error
					</declname>
				</param>
				<param>
					<type>
						va_list
					</type>
					<declname>
						_ap
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Partially open a stream from a URL. This function behaves identically to
						<ref refid="group__stream__open__close_1ga8272aa50f50ac63b20333f0a114bb247" kindref="member">
							op_test_url()
						</ref>
						, except that it takes a va_list instead of a variable number of arguments. It does not call the
						<computeroutput>
							va_end
						</computeroutput>
						macro, and because it invokes the
						<computeroutput>
							va_arg
						</computeroutput>
						macro, the value of
						<emphasis>
							_ap
						</emphasis>
						is undefined after the call.
						<simplesect kind="note">
							<para>
								If you use this function, you must link against
								<computeroutput>
									libopusurl
								</computeroutput>
								.
							</para>
						</simplesect>
						<simplesect kind="see">
							<para>
								<ref refid="group__stream__open__close_1ga8272aa50f50ac63b20333f0a114bb247" kindref="member">
									op_test_url
								</ref>
							</para>
						</simplesect>
						<simplesect kind="see">
							<para>
								<ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">
									op_test_callbacks
								</ref>
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_url
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The URL to open. Currently only the &lt;file:&gt;, &lt;http:&gt;, and &lt;https:&gt; schemes are supported. Both &lt;http:&gt; and &lt;https:&gt; may be disabled at compile time, in which case opening such URLs will always fail. Currently this only supports URIs. IRIs should be converted to UTF-8 and URL-escaped, with internationalized domain names encoded in punycode, before passing them to this function.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_error
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns 0 on success, or a failure code on error. You may pass in
										<computeroutput>
											NULL
										</computeroutput>
										if you don&apos;t want the failure code. See
										<ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">
											op_open_callbacks()
										</ref>
										for a full list of failure codes.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="inout">
										_ap
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A list of the
										<ref refid="group__url__options" kindref="compound">
											optional flags
										</ref>
										to use. This is a variable-length list of options terminated with
										<computeroutput>
											NULL
										</computeroutput>
										.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A partially opened
								<computeroutput>
									OggOpusFile
								</computeroutput>
								, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1228" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1ga8272aa50f50ac63b20333f0a114bb247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT OggOpusFile *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT OggOpusFile* op_test_url
				</definition>
				<argsstring>
					(const char *_url, int *_error,...) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_test_url
				</name>
				<param>
					<type>
						const char *
					</type>
					<declname>
						_url
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_error
					</declname>
				</param>
				<param>
					<type>
						...
					</type>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Partially open a stream from a URL.
						<simplesect kind="note">
							<para>
								If you use this function, you must link against
								<computeroutput>
									libopusurl
								</computeroutput>
								.
							</para>
						</simplesect>
						<simplesect kind="see">
							<para>
								<ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">
									op_test_callbacks
								</ref>
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_url
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The URL to open. Currently only the &lt;file:&gt;, &lt;http:&gt;, and &lt;https:&gt; schemes are supported. Both &lt;http:&gt; and &lt;https:&gt; may be disabled at compile time, in which case opening such URLs will always fail. Currently this only supports URIs. IRIs should be converted to UTF-8 and URL-escaped, with internationalized domain names encoded in punycode, before passing them to this function.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_error
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns 0 on success, or a failure code on error. You may pass in
										<computeroutput>
											NULL
										</computeroutput>
										if you don&apos;t want the failure code. See
										<ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">
											op_open_callbacks()
										</ref>
										for a full list of failure codes.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										...
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<ref refid="group__url__options" kindref="compound">
											optional flags
										</ref>
										to use. This is a variable-length list of options terminated with
										<computeroutput>
											NULL
										</computeroutput>
										.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A partially opened
								<computeroutput>
									OggOpusFile
								</computeroutput>
								, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1252" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT OggOpusFile *
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT OggOpusFile* op_test_callbacks
				</definition>
				<argsstring>
					(void *_source, const OpusFileCallbacks *_cb, const unsigned char *_initial_data, size_t _initial_bytes, int *_error) OP_ARG_NONNULL(2)
				</argsstring>
				<name>
					op_test_callbacks
				</name>
				<param>
					<type>
						void *
					</type>
					<declname>
						_source
					</declname>
				</param>
				<param>
					<type>
						const
						<ref refid="struct_opus_file_callbacks" kindref="compound">
							OpusFileCallbacks
						</ref>
						*
					</type>
					<declname>
						_cb
					</declname>
				</param>
				<param>
					<type>
						const unsigned char *
					</type>
					<declname>
						_initial_data
					</declname>
				</param>
				<param>
					<type>
						size_t
					</type>
					<declname>
						_initial_bytes
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_error
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Partially open a stream using the given set of callbacks to access it. This tests for Opusness and loads the headers for the first link. It does not seek (although it tests for seekability). You can query a partially open stream for the few pieces of basic information returned by
						<ref refid="group__stream__info_1ga41992ce6f066e07609e5fe2ccd961f40" kindref="member">
							op_serialno()
						</ref>
						,
						<ref refid="group__stream__info_1ga42c829e67c0ce8359bfbfc31a45c04f4" kindref="member">
							op_channel_count()
						</ref>
						,
						<ref refid="group__stream__info_1gabae95dfa8a278a305213332e295443bb" kindref="member">
							op_head()
						</ref>
						, and
						<ref refid="group__stream__info_1ga4b9b8b62a9fb04aee64c288e106a4822" kindref="member">
							op_tags()
						</ref>
						(but only for the first link). You may also determine if it is seekable via a call to
						<ref refid="group__stream__info_1ga9272a4a6ac9e01fbc549008f5ff58b4c" kindref="member">
							op_seekable()
						</ref>
						. You cannot read audio from the stream, seek, get the size or duration, get information from links other than the first one, or even get the total number of links until you finish opening the stream with
						<ref refid="group__stream__open__close_1ga7b7f1c778ce6ced5538ce66e292d894d" kindref="member">
							op_test_open()
						</ref>
						. If you do not need to do any of these things, you can dispose of it with
						<ref refid="group__stream__open__close_1gaf494ef9aa761647d8167c49507560d1c" kindref="member">
							op_free()
						</ref>
						instead. This function is provided mostly to simplify porting existing code that used
						<computeroutput>
							libvorbisfile
						</computeroutput>
						. For new code, you are likely better off using
						<ref refid="group__stream__open__close_1ga54158ed1570a0062cb674115cd3699ab" kindref="member">
							op_test()
						</ref>
						instead, which is less resource-intensive, requires less data to succeed, and imposes a hard limit on the amount of data it examines (important for unseekable sources, where all such data must be buffered until you are sure of the stream type).
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_source
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream to read from (e.g., a
										<computeroutput>
											FILE *
										</computeroutput>
										).
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_cb
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The callbacks with which to access the stream.
										<computeroutput>
											<ulink url="#op_read_func">
												read()
											</ulink>
										</computeroutput>
										must be implemented.
										<computeroutput>
											<ulink url="#op_seek_func">
												seek()
											</ulink>
										</computeroutput>
										and
										<computeroutput>
											<ulink url="#op_tell_func">
												tell()
											</ulink>
										</computeroutput>
										may be
										<computeroutput>
											NULL
										</computeroutput>
										, or may always return -1 to indicate a source is unseekable, but if
										<computeroutput>
											<ulink url="#op_seek_func">
												seek()
											</ulink>
										</computeroutput>
										is implemented and succeeds on a particular source, then
										<computeroutput>
											<ulink url="#op_tell_func">
												tell()
											</ulink>
										</computeroutput>
										must also.
										<computeroutput>
											<ulink url="#op_close_func">
												close()
											</ulink>
										</computeroutput>
										may be
										<computeroutput>
											NULL
										</computeroutput>
										, but if it is not, it will be called when the
										<computeroutput>
											OggOpusFile
										</computeroutput>
										is destroyed by
										<ref refid="group__stream__open__close_1gaf494ef9aa761647d8167c49507560d1c" kindref="member">
											op_free()
										</ref>
										. It will not be called if
										<ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">
											op_open_callbacks()
										</ref>
										fails with an error.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_initial_data
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An initial buffer of data from the start of the stream. Applications can read some number of bytes from the start of the stream to help identify this as an Opus stream, and then provide them here to allow the stream to be tested more thoroughly, even if it is unseekable.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_initial_bytes
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of bytes in
										<emphasis>
											_initial_data
										</emphasis>
										. If the stream is seekable, its current position (as reported by
										<computeroutput>
											<ulink url="#opus_tell_func">
												tell()
											</ulink>
										</computeroutput>
										at the start of this function) must be equal to
										<emphasis>
											_initial_bytes
										</emphasis>
										. Otherwise, seeking to absolute positions will generate inconsistent results.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_error
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Returns 0 on success, or a failure code on error. You may pass in
										<computeroutput>
											NULL
										</computeroutput>
										if you don&apos;t want the failure code. See
										<ref refid="group__stream__open__close_1ga5b81c0b685f3d3c9c7d7091e5536c759" kindref="member">
											op_open_callbacks()
										</ref>
										for a full list of failure codes.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A partially opened
								<computeroutput>
									OggOpusFile
								</computeroutput>
								, or
								<computeroutput>
									NULL
								</computeroutput>
								on error.
								<computeroutput>
									libopusfile
								</computeroutput>
								does
								<emphasis>
									not
								</emphasis>
								take ownership of the source if the call fails. The calling application is responsible for closing the source if this call returns an error.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1317" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1ga7b7f1c778ce6ced5538ce66e292d894d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int op_test_open
				</definition>
				<argsstring>
					(OggOpusFile *_of) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_test_open
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Finish opening a stream partially opened with
						<ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">
							op_test_callbacks()
						</ref>
						or one of the associated convenience functions. If this function fails, you are still responsible for freeing the
						<computeroutput>
							OggOpusFile
						</computeroutput>
						with
						<ref refid="group__stream__open__close_1gaf494ef9aa761647d8167c49507560d1c" kindref="member">
							op_free()
						</ref>
						.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										to finish opening.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								0 on success, or a negative value on error.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" kindref="member">
											OP_EREAD
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An underlying read, seek, or tell operation failed when it should have succeeded.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										There was a memory allocation failure, or an internal library error.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaeea27378f826033ca23584d8403665d3" kindref="member">
											OP_EIMPL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream used a feature that is not implemented, such as an unsupported channel family.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was not partially opened with
										<ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">
											op_test_callbacks()
										</ref>
										or one of the associated convenience functions.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">
											OP_ENOTFORMAT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream contained a link that did not have any logical Opus streams in it.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">
											OP_EBADHEADER
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A required header packet was not properly formatted, contained illegal values, or was missing altogether.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" kindref="member">
											OP_EVERSION
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An ID header contained an unrecognized version number.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf7b58a439a471366e9eb5b8f2a8cd041" kindref="member">
											OP_EBADLINK
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										We failed to find data we had seen before after seeking.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf82657fc888f1dcf2e0d8f066b8a6cc7" kindref="member">
											OP_EBADTIMESTAMP
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The first or last timestamp in a link failed basic validity checks.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1347" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__open__close_1gaf494ef9aa761647d8167c49507560d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					void
				</type>
				<definition>
					void op_free
				</definition>
				<argsstring>
					(OggOpusFile *_of)
				</argsstring>
				<name>
					op_free
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Release all memory used by an
						<computeroutput>
							OggOpusFile
						</computeroutput>
						.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										to free.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1351" column="1" />
			</memberdef>
		</sectiondef>
		<sectiondef kind="user-defined">
			<header>
				Functions for obtaining information about streams
			</header>
			<description>
				<para>
					These functions allow you to get basic information about a stream, including seekability, the number of links (for chained streams), plus the size, duration, bitrate, header parameters, and meta information for each link (or, where available, the stream as a whole). Some of these (size, duration) are only available for seekable streams. You can also query the current stream position, link, and playback time, and instantaneous bitrate during playback. Some of these functions may be used successfully on the partially open streams returned by
					<ref refid="group__stream__open__close_1gafe0e84414bbd1b511b494b5c5cef3c0f" kindref="member">
						op_test_callbacks()
					</ref>
					or one of the associated convenience functions. Their documention will indicate so explicitly.
				</para>
			</description>
			<memberdef kind="function" id="group__stream__info_1ga9272a4a6ac9e01fbc549008f5ff58b4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int op_seekable
				</definition>
				<argsstring>
					(const OggOpusFile *_of) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_seekable
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Returns whether or not the data source being read is seekable. This is true if
						<orderedlist>
							<listitem>
								<para>
									The
									<computeroutput>
										<ulink url="#op_seek_func">
											seek()
										</ulink>
									</computeroutput>
									and
									<computeroutput>
										<ulink url="#op_tell_func">
											tell()
										</ulink>
									</computeroutput>
									callbacks are both non-
									<computeroutput>
										NULL
									</computeroutput>
									,
								</para>
							</listitem>
							<listitem>
								<para>
									The
									<computeroutput>
										<ulink url="#op_seek_func">
											seek()
										</ulink>
									</computeroutput>
									callback was successfully executed at least once, and
								</para>
							</listitem>
							<listitem>
								<para>
									The
									<computeroutput>
										<ulink url="#op_tell_func">
											tell()
										</ulink>
									</computeroutput>
									callback was successfully able to report the position indicator afterwards.
								</para>
							</listitem>
						</orderedlist>
						This function may be called on partially-opened streams.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										whose seekable status is to be returned.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A non-zero value if seekable, and 0 if unseekable.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1386" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1gaaf6ff40725a8bc7e73c9d396ab91837d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int op_link_count
				</definition>
				<argsstring>
					(const OggOpusFile *_of) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_link_count
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Returns the number of links in this chained stream. This function may be called on partially-opened streams, but it will always return 1. The actual number of links is not known until the stream is fully opened.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the link count.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								For fully-open seekable sources, this returns the total number of links in the whole stream, which will be at least 1. For partially-open or unseekable sources, this always returns 1.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1396" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1ga41992ce6f066e07609e5fe2ccd961f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					opus_uint32
				</type>
				<definition>
					opus_uint32 op_serialno
				</definition>
				<argsstring>
					(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_serialno
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_li
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Get the serial number of the given link in a (possibly-chained) Ogg Opus stream. This function may be called on partially-opened streams, but it will always return the serial number of the Opus stream in the first link.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the serial number.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_li
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The index of the link whose serial number should be retrieved. Use a negative number to get the serial number of the current link.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The serial number of the given link. If
								<emphasis>
									_li
								</emphasis>
								is greater than the total number of links, this returns the serial number of the last link. If the source is not seekable, this always returns the serial number of the current link.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1411" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1ga42c829e67c0ce8359bfbfc31a45c04f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int op_channel_count
				</definition>
				<argsstring>
					(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_channel_count
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_li
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Get the channel count of the given link in a (possibly-chained) Ogg Opus stream. This is equivalent to
						<computeroutput>
							op_head(_of,_li)-&gt;channel_count
						</computeroutput>
						, but is provided for convenience. This function may be called on partially-opened streams, but it will always return the channel count of the Opus stream in the first link.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the channel count.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_li
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The index of the link whose channel count should be retrieved. Use a negative number to get the channel count of the current link.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The channel count of the given link. If
								<emphasis>
									_li
								</emphasis>
								is greater than the total number of links, this returns the channel count of the last link. If the source is not seekable, this always returns the channel count of the current link.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1428" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1gaa433bdeab96315d315269b60ba52b877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					opus_int64
				</type>
				<definition>
					opus_int64 op_raw_total
				</definition>
				<argsstring>
					(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_raw_total
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_li
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Get the total (compressed) size of the stream, or of an individual link in a (possibly-chained) Ogg Opus stream, including all headers and Ogg muxing overhead.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the compressed size.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_li
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The index of the link whose compressed size should be computed. Use a negative number to get the compressed size of the entire stream.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The compressed size of the entire stream if
								<emphasis>
									_li
								</emphasis>
								is negative, the compressed size of link
								<emphasis>
									_li
								</emphasis>
								if it is non-negative, or a negative value on error. The compressed size of the entire stream may be smaller than that of the underlying source if trailing garbage was detected in the file.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The source is not seekable (so we can&apos;t know the length),
										<emphasis>
											_li
										</emphasis>
										wasn&apos;t less than the total number of links in the stream, or the stream was only partially open.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1446" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1ga8c228c3d95f2c903ad6cfd2b78d8dad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					ogg_int64_t
				</type>
				<definition>
					ogg_int64_t op_pcm_total
				</definition>
				<argsstring>
					(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_pcm_total
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_li
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Get the total PCM length (number of samples at 48 kHz) of the stream, or of an individual link in a (possibly-chained) Ogg Opus stream. Users looking for
						<computeroutput>
							op_time_total()
						</computeroutput>
						should use
						<ref refid="group__stream__info_1ga8c228c3d95f2c903ad6cfd2b78d8dad6" kindref="member">
							op_pcm_total()
						</ref>
						instead. Because timestamps in Opus are fixed at 48 kHz, there is no need for a separate function to convert this to seconds (and leaving it out avoids introducing floating point to the API, for those that wish to avoid it).
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the PCM offset.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_li
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The index of the link whose PCM length should be computed. Use a negative number to get the PCM length of the entire stream.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The PCM length of the entire stream if
								<emphasis>
									_li
								</emphasis>
								is negative, the PCM length of link
								<emphasis>
									_li
								</emphasis>
								if it is non-negative, or a negative value on error.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The source is not seekable (so we can&apos;t know the length),
										<emphasis>
											_li
										</emphasis>
										wasn&apos;t less than the total number of links in the stream, or the stream was only partially open.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1464" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1gabae95dfa8a278a305213332e295443bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					const
					<ref refid="struct_opus_head" kindref="compound">
						OpusHead
					</ref>
					*
				</type>
				<definition>
					const OpusHead* op_head
				</definition>
				<argsstring>
					(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_head
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_li
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Get the ID header information for the given link in a (possibly chained) Ogg Opus stream. This function may be called on partially-opened streams, but it will always return the ID header information of the Opus stream in the first link.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the ID header information.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_li
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The index of the link whose ID header information should be retrieved. Use a negative number to get the ID header information of the current link. For an unseekable stream,
										<emphasis>
											_li
										</emphasis>
										is ignored, and the ID header information for the current link is always returned, if available.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The contents of the ID header for the given link.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1480" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1ga4b9b8b62a9fb04aee64c288e106a4822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					const
					<ref refid="struct_opus_tags" kindref="compound">
						OpusTags
					</ref>
					*
				</type>
				<definition>
					const OpusTags* op_tags
				</definition>
				<argsstring>
					(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_tags
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_li
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Get the comment header information for the given link in a (possibly chained) Ogg Opus stream. This function may be called on partially-opened streams, but it will always return the tags from the Opus stream in the first link.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the comment header information.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_li
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The index of the link whose comment header information should be retrieved. Use a negative number to get the comment header information of the current link. For an unseekable stream,
										<emphasis>
											_li
										</emphasis>
										is ignored, and the comment header information for the current link is always returned, if available.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The contents of the comment header for the given link, or
								<computeroutput>
									NULL
								</computeroutput>
								if this is an unseekable stream that encountered an invalid link.
							</para>
						</simplesect>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1498" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1gabd97a260a6740ea7c2c59ca9ecd592bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int op_current_link
				</definition>
				<argsstring>
					(const OggOpusFile *_of) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_current_link
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Retrieve the index of the current link. This is the link that produced the data most recently read by
						<ref refid="group__stream__decoding_1ga73493002d84a234f5e19b70f1dddbe2a" kindref="member">
							op_read_float()
						</ref>
						or its associated functions, or, after a seek, the link that the seek target landed in. Reading more data may advance the link index (even on the first read after a seek).
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the current link index.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The index of the current link on success, or a negative value on failure. For seekable streams, this is a number between 0 and the value returned by
								<ref refid="group__stream__info_1gaaf6ff40725a8bc7e73c9d396ab91837d" kindref="member">
									op_link_count()
								</ref>
								. For unseekable streams, this value starts at 0 and increments by one each time a new link is encountered (even though
								<ref refid="group__stream__info_1gaaf6ff40725a8bc7e73c9d396ab91837d" kindref="member">
									op_link_count()
								</ref>
								always returns 1).
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was only partially open.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1515" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1ga2778b161df6d07abdd642f1a4802cc1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					opus_int32
				</type>
				<definition>
					opus_int32 op_bitrate
				</definition>
				<argsstring>
					(const OggOpusFile *_of, int _li) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_bitrate
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_li
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Computes the bitrate for a given link in a (possibly chained) Ogg Opus stream. The stream must be seekable to compute the bitrate. For unseekable streams, use
						<ref refid="group__stream__info_1ga7e9e871615055673d5e3c7b4c1dfce80" kindref="member">
							op_bitrate_instant()
						</ref>
						to get periodic estimates.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the bitrate.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_li
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The index of the link whose bitrate should be computed. USe a negative number to get the bitrate of the whole stream.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The bitrate on success, or a negative value on error.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was only partially open, the stream was not seekable, or
										<emphasis>
											_li
										</emphasis>
										was larger than the number of links.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1528" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1ga7e9e871615055673d5e3c7b4c1dfce80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					opus_int32
				</type>
				<definition>
					opus_int32 op_bitrate_instant
				</definition>
				<argsstring>
					(OggOpusFile *_of) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_bitrate_instant
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Compute the instantaneous bitrate, measured as the ratio of bits to playable samples decoded since a) the last call to
						<ref refid="group__stream__info_1ga7e9e871615055673d5e3c7b4c1dfce80" kindref="member">
							op_bitrate_instant()
						</ref>
						, b) the last seek, or c) the start of playback, whichever was most recent. This will spike somewhat after a seek or at the start/end of a chain boundary, as pre-skip, pre-roll, and end-trimming causes samples to be decoded but not played.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the bitrate.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The bitrate, in bits per second, or a negative value on error.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga4fd28e64a5cbe5e0ba163916199611a5" kindref="member">
											OP_FALSE
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										No data has been decoded since any of the events described above.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was only partially open.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1541" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1gab857684ab149c6225884ad94c3787561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					opus_int64
				</type>
				<definition>
					opus_int64 op_raw_tell
				</definition>
				<argsstring>
					(const OggOpusFile *_of) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_raw_tell
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Obtain the current value of the position indicator for
						<emphasis>
							_of
						</emphasis>
						.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the position indicator.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The byte position that is currently being read from.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was only partially open.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1547" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__info_1gae07b8e40d883cd2a43edfec8c5bfa205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					ogg_int64_t
				</type>
				<definition>
					ogg_int64_t op_pcm_tell
				</definition>
				<argsstring>
					(const OggOpusFile *_of) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_pcm_tell
				</name>
				<param>
					<type>
						const OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Obtain the PCM offset of the next sample to be read. If the stream is not properly timestamped, this might not increment by the proper amount between reads, or even return monotonically increasing values.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to retrieve the PCM offset.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The PCM offset of the next sample to be read.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was only partially open.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1556" column="1" />
			</memberdef>
		</sectiondef>
		<sectiondef kind="user-defined">
			<header>
				Functions for seeking in Opus streams
			</header>
			<description>
				<para>
					These functions let you seek in Opus streams, if the underlying source support it. Seeking is implemented for all built-in stream I/O routines, though some individual sources may not be seekable (pipes, live HTTP streams, or HTTP streams from a server that does not support
					<computeroutput>
						Range
					</computeroutput>
					requests).
					<ref refid="group__stream__seeking_1gaf83b0fc6cdf94508876a206ab980851a" kindref="member">
						op_raw_seek()
					</ref>
					is the fastest: it is guaranteed to perform at most one physical seek, but, since the target is a byte position, makes no guarantee how close to a given time it will come.
					<ref refid="group__stream__seeking_1gad4f20d0601c2bab8d724f647673ae92c" kindref="member">
						op_pcm_seek()
					</ref>
					provides sample-accurate seeking. The number of physical seeks it requires is still quite small (often 1 or 2, even in highly variable bitrate streams). Seeking in Opus requires decoding some pre-roll amount before playback to allow the internal state to converge (as if recovering from packet loss). This is handled internally by
					<computeroutput>
						libopusfile
					</computeroutput>
					, but means there is little extra overhead for decoding up to the exact position requested (since it must decode some amount of audio anyway). It also means that decoding after seeking may not return exactly the same values as would be obtained by decoding the stream straight through. However, such differences are expected to be smaller than the loss introduced by Opus&apos;s lossy compression.
				</para>
			</description>
			<memberdef kind="function" id="group__stream__seeking_1gaf83b0fc6cdf94508876a206ab980851a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int op_raw_seek
				</definition>
				<argsstring>
					(OggOpusFile *_of, opus_int64 _byte_offset) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_raw_seek
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						opus_int64
					</type>
					<declname>
						_byte_offset
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Seek to a byte offset relative to the
						<bold>
							compressed
						</bold>
						data. This also scans packets to update the PCM cursor. It will cross a logical bitstream boundary, but only if it can&apos;t get any packets out of the tail of the link to which it seeks.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										in which to seek.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_byte_offset
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The byte position to seek to.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								0 on success, or a negative error code on failure.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" kindref="member">
											OP_EREAD
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The underlying seek operation failed.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was only partially open, or the target was outside the valid range for the stream.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gadd54f4d82cfabedb5963331fbe0bc99c" kindref="member">
											OP_ENOSEEK
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										This stream is not seekable.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf7b58a439a471366e9eb5b8f2a8cd041" kindref="member">
											OP_EBADLINK
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Failed to initialize a decoder for a stream for an unknown reason.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1599" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__seeking_1gad4f20d0601c2bab8d724f647673ae92c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int op_pcm_seek
				</definition>
				<argsstring>
					(OggOpusFile *_of, ogg_int64_t _pcm_offset) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_pcm_seek
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						ogg_int64_t
					</type>
					<declname>
						_pcm_offset
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Seek to the specified PCM offset, such that decoding will begin at exactly the requested position.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										in which to seek.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_pcm_offset
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The PCM offset to seek to. This is in samples at 48 kHz relative to the start of the stream.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								0 on success, or a negative value on error.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" kindref="member">
											OP_EREAD
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An underlying read or seek operation failed.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was only partially open, or the target was outside the valid range for the stream.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gadd54f4d82cfabedb5963331fbe0bc99c" kindref="member">
											OP_ENOSEEK
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										This stream is not seekable.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf7b58a439a471366e9eb5b8f2a8cd041" kindref="member">
											OP_EBADLINK
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										We failed to find data we had seen before, or the bitstream structure was sufficiently malformed that seeking to the target destination was impossible.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1615" column="1" />
			</memberdef>
		</sectiondef>
		<sectiondef kind="user-defined">
			<header>
				Functions for decoding audio data
			</header>
			<description>
				<para>
					These functions retrieve actual decoded audio data from the stream. The general functions,
					<ref refid="group__stream__decoding_1ga963c917749335e29bb2b698c1cb20a10" kindref="member">
						op_read()
					</ref>
					and
					<ref refid="group__stream__decoding_1ga73493002d84a234f5e19b70f1dddbe2a" kindref="member">
						op_read_float()
					</ref>
					return 16-bit or floating-point output, both using native endian ordering. The number of channels returned can change from link to link in a chained stream. There are special functions,
					<ref refid="group__stream__decoding_1gaaca17ad3fd6430dc8fd43308149428eb" kindref="member">
						op_read_stereo()
					</ref>
					and
					<ref refid="group__stream__decoding_1ga9736f96563500c0978f56f0fd6bdad83" kindref="member">
						op_read_float_stereo()
					</ref>
					, which always output two channels, to simplify applications which do not wish to handle multichannel audio. These downmix multichannel files to two channels, so they can always return samples in the same format for every link in a chained file. If the rest of your audio processing chain can handle floating point, those routines should be preferred, as floating point output avoids introducing clipping and other issues which might be avoided entirely if, e.g., you scale down the volume at some other stage. However, if you intend to direct consume 16-bit samples, the conversion in
					<computeroutput>
						libopusfile
					</computeroutput>
					provides noise-shaping dithering and, if compiled against
					<computeroutput>
						libopus
					</computeroutput>
					<nonbreakablespace />
					1.1 or later, soft-clipping prevention.
					<computeroutput>
						libopusfile
					</computeroutput>
					can also be configured at compile time to use the fixed-point
					<computeroutput>
						libopus
					</computeroutput>
					API. If so,
					<computeroutput>
						libopusfile
					</computeroutput>
					&apos;s floating-point API may also be disabled. In that configuration, nothing in
					<computeroutput>
						libopusfile
					</computeroutput>
					will use any floating-point operations, to simplify support on devices without an adequate FPU.
					<simplesect kind="warning">
						<para>
							HTTPS streams may be be vulnerable to truncation attacks if you do not check the error return code from
							<ref refid="group__stream__decoding_1ga73493002d84a234f5e19b70f1dddbe2a" kindref="member">
								op_read_float()
							</ref>
							or its associated functions. If the remote peer does not close the connection gracefully (with a TLS &quot;close notify&quot; message), these functions will return
							<ref refid="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" kindref="member">
								OP_EREAD
							</ref>
							instead of 0 when they reach the end of the file. If you are reading from an &lt;https:&gt; URL (particularly if seeking is not supported), you should make sure to check for this error and warn the user appropriately.
						</para>
					</simplesect>
				</para>
			</description>
			<memberdef kind="define" id="group__stream__decoding_1ga55ed1cb616d856a47d618fa099c742aa" prot="public" static="no">
				<name>
					OP_DEC_FORMAT_SHORT
				</name>
				<initializer>
					(7008)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Indicates that the decoding callback should produce signed 16-bit native-endian output samples.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1659" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="1659" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__stream__decoding_1gac5c6e0837a5d747fd909aff905f5da3f" prot="public" static="no">
				<name>
					OP_DEC_FORMAT_FLOAT
				</name>
				<initializer>
					(7040)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Indicates that the decoding callback should produce 32-bit native-endian float samples.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1662" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="1662" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__stream__decoding_1gaf421eba19d82d5b0c170b548b8ff79f1" prot="public" static="no">
				<name>
					OP_DEC_USE_DEFAULT
				</name>
				<initializer>
					(6720)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Indicates that the decoding callback did not decode anything, and that
						<computeroutput>
							libopusfile
						</computeroutput>
						should decode normally instead.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1666" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="1666" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__stream__decoding_1ga846edba35e7470251a6a95b1e2364855" prot="public" static="no">
				<name>
					OP_HEADER_GAIN
				</name>
				<initializer>
					(0)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Gain offset type that indicates that the provided offset is relative to the header gain. This is the default.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1719" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="1719" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__stream__decoding_1ga51082f7c661488bce9bfdf0e5401fabf" prot="public" static="no">
				<name>
					OP_TRACK_GAIN
				</name>
				<initializer>
					(3008)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Gain offset type that indicates that the provided offset is relative to the R128_TRACK_GAIN value (if any), in addition to the header gain.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1723" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="1723" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__stream__decoding_1ga4215354abbd19df9eab5a5380dd96cb0" prot="public" static="no">
				<name>
					OP_ABSOLUTE_GAIN
				</name>
				<initializer>
					(3009)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Gain offset type that indicates that the provided offset should be used as the gain directly, without applying any the header or track gains.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1727" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="1727" bodyend="-1" />
			</memberdef>
			<memberdef kind="typedef" id="group__stream__decoding_1ga81a50874a82484034c22dfeddce177e1" prot="public" static="no">
				<type>
					int(*
				</type>
				<definition>
					typedef int(* op_decode_cb_func) (void *_ctx, OpusMSDecoder *_decoder, void *_pcm, const ogg_packet *_op, int _nsamples, int _nchannels, int _format, int _li)
				</definition>
				<argsstring>
					)(void *_ctx, OpusMSDecoder *_decoder, void *_pcm, const ogg_packet *_op, int _nsamples, int _nchannels, int _format, int _li)
				</argsstring>
				<name>
					op_decode_cb_func
				</name>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Called to decode an Opus packet. This should invoke the functional equivalent of opus_multistream_decode() or opus_multistream_decode_float(), except that it returns 0 on success instead of the number of decoded samples (which is known a priori).
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_ctx
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The application-provided callback context.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_decoder
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The decoder to use to decode the packet.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_pcm
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The buffer to decode into. This will always have enough room for
										<emphasis>
											_nchannels
										</emphasis>
										of
										<emphasis>
											_nsamples
										</emphasis>
										samples, which should be placed into this buffer interleaved.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_op
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The packet to decode. This will always have its granule position set to a valid value.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_nsamples
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of samples expected from the packet.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_nchannels
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of channels expected from the packet.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_format
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The desired sample output format. This is either
										<ref refid="group__stream__decoding_1ga55ed1cb616d856a47d618fa099c742aa" kindref="member">
											OP_DEC_FORMAT_SHORT
										</ref>
										or
										<ref refid="group__stream__decoding_1gac5c6e0837a5d747fd909aff905f5da3f" kindref="member">
											OP_DEC_FORMAT_FLOAT
										</ref>
										.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_li
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The index of the link from which this packet was decoded.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								A non-negative value on success, or a negative value on error. The error codes should be the same as those returned by opus_multistream_decode() or opus_multistream_decode_float().
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										0
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Decoding was successful. The application has filled the buffer with exactly _nsamples and _nchannels samples in the requested format.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__stream__decoding_1gaf421eba19d82d5b0c170b548b8ff79f1" kindref="member">
											OP_DEC_USE_DEFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										No decoding was done.
										<computeroutput>
											libopusfile
										</computeroutput>
										should decode normally instead.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1697" column="1" bodyfile="includes/personnal/opusfile.h" bodystart="1697" bodyend="-1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__decoding_1gae0d5b986dff23a82b6002915268ee3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					void
				</type>
				<definition>
					void op_set_decode_callback
				</definition>
				<argsstring>
					(OggOpusFile *_of, op_decode_cb_func _decode_cb, void *_ctx) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_set_decode_callback
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						<ref refid="group__stream__decoding_1ga81a50874a82484034c22dfeddce177e1" kindref="member">
							op_decode_cb_func
						</ref>
					</type>
					<declname>
						_decode_cb
					</declname>
				</param>
				<param>
					<type>
						void *
					</type>
					<declname>
						_ctx
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Sets the packet decode callback function. This is called once for each packet that needs to be decoded. A call to this function is no guarantee that the audio will eventually be delivered to the application. Some or all of the data from the packet may be discarded (i.e., at the beginning or end of a link, or after a seek), however the callback is required to provide all of it.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										on which to set the decode callback.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_decode_cb
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The callback function to call. This may be
										<computeroutput>
											NULL
										</computeroutput>
										to disable calling the callback.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_ctx
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The application-provided context pointer to pass to the callback on each call.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1713" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__decoding_1ga7df927613ccf57996319678e08513289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					int
				</type>
				<definition>
					int op_set_gain_offset
				</definition>
				<argsstring>
					(OggOpusFile *_of, int _gain_type, opus_int32 _gain_offset_q8) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_set_gain_offset
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_gain_type
					</declname>
				</param>
				<param>
					<type>
						opus_int32
					</type>
					<declname>
						_gain_offset_q8
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Sets the gain to be used for decoded output. By default, the gain in the header is applied with no additional offset. The total gain (including header gain and/or track gain, if applicable, and this offset), will be clamped to [-32768,32767]/256 dB. This is more than enough to saturate or underflow 16-bit PCM.
						<simplesect kind="note">
							<para>
								The new gain will not be applied to any already buffered, decoded output. This means you cannot change it sample-by-sample, as at best it will be updated packet-by-packet. It is meant for setting a target volume level, rather than applying smooth fades, etc.
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										on which to set the gain offset.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_gain_type
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										One of
										<ref refid="group__stream__decoding_1ga846edba35e7470251a6a95b1e2364855" kindref="member">
											OP_HEADER_GAIN
										</ref>
										,
										<ref refid="group__stream__decoding_1ga51082f7c661488bce9bfdf0e5401fabf" kindref="member">
											OP_TRACK_GAIN
										</ref>
										, or
										<ref refid="group__stream__decoding_1ga4215354abbd19df9eab5a5380dd96cb0" kindref="member">
											OP_ABSOLUTE_GAIN
										</ref>
										.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_gain_offset_q8
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The gain offset to apply, in 1/256ths of a dB.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								0 on success or a negative value on error.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<emphasis>
											_gain_type
										</emphasis>
										was unrecognized.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1746" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__decoding_1gac1de9480ad0fa65de778d9c88f62f6f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					void
				</type>
				<definition>
					void op_set_dither_enabled
				</definition>
				<argsstring>
					(OggOpusFile *_of, int _enabled) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_set_dither_enabled
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_enabled
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Sets whether or not dithering is enabled for 16-bit decoding. By default, when
						<computeroutput>
							libopusfile
						</computeroutput>
						is compiled to use floating-point internally, calling
						<ref refid="group__stream__decoding_1ga963c917749335e29bb2b698c1cb20a10" kindref="member">
							op_read()
						</ref>
						or
						<ref refid="group__stream__decoding_1gaaca17ad3fd6430dc8fd43308149428eb" kindref="member">
							op_read_stereo()
						</ref>
						will first decode to float, and then convert to fixed-point using noise-shaping dithering. This flag can be used to disable that dithering. When the application uses
						<ref refid="group__stream__decoding_1ga73493002d84a234f5e19b70f1dddbe2a" kindref="member">
							op_read_float()
						</ref>
						or
						<ref refid="group__stream__decoding_1ga9736f96563500c0978f56f0fd6bdad83" kindref="member">
							op_read_float_stereo()
						</ref>
						, or when the library has been compiled to decode directly to fixed point, this flag has no effect.
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										on which to enable or disable dithering.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_enabled
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A non-zero value to enable dithering, or 0 to disable it.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1759" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__decoding_1ga963c917749335e29bb2b698c1cb20a10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT int
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT int op_read
				</definition>
				<argsstring>
					(OggOpusFile *_of, opus_int16 *_pcm, int _buf_size, int *_li) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_read
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						opus_int16 *
					</type>
					<declname>
						_pcm
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_buf_size
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_li
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Reads more samples from the stream.
						<simplesect kind="note">
							<para>
								Although
								<emphasis>
									_buf_size
								</emphasis>
								must indicate the total number of values that can be stored in
								<emphasis>
									_pcm
								</emphasis>
								, the return value is the number of samples
								<emphasis>
									per channel
								</emphasis>
								. This is done because
								<orderedlist>
									<listitem>
										<para>
											The channel count cannot be known a priori (reading more samples might advance us into the next link, with a different channel count), so
											<emphasis>
												_buf_size
											</emphasis>
											cannot also be in units of samples per channel,
										</para>
									</listitem>
									<listitem>
										<para>
											Returning the samples per channel matches the
											<computeroutput>
												libopus
											</computeroutput>
											API as closely as we&apos;re able,
										</para>
									</listitem>
									<listitem>
										<para>
											Returning the total number of values instead of samples per channel would mean the caller would need a division to compute the samples per channel, and might worry about the possibility of getting back samples for some channels and not others, and
										</para>
									</listitem>
									<listitem>
										<para>
											This approach is relatively fool-proof: if an application passes too small a value to
											<emphasis>
												_buf_size
											</emphasis>
											, they will simply get fewer samples back, and if they assume the return value is the total number of values, then they will simply read too few (rather than reading too many and going off the end of the buffer).
										</para>
									</listitem>
								</orderedlist>
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to read.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_pcm
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A buffer in which to store the output PCM samples, as signed native-endian 16-bit values at 48
										<nonbreakablespace />
										kHz with a nominal range of
										<computeroutput>
											[-32768,32767)
										</computeroutput>
										. Multiple channels are interleaved using the
										<ulink url="http://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-800004.3.9">
											Vorbis channel ordering
										</ulink>
										. This must have room for at least
										<emphasis>
											_buf_size
										</emphasis>
										values.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_buf_size
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of values that can be stored in
										<emphasis>
											_pcm
										</emphasis>
										. It is recommended that this be large enough for at least 120 ms of data at 48 kHz per channel (5760 values per channel). Smaller buffers will simply return less data, possibly consuming more memory to buffer the data internally.
										<computeroutput>
											libopusfile
										</computeroutput>
										may return less data than requested. If so, there is no guarantee that the remaining data in
										<emphasis>
											_pcm
										</emphasis>
										will be unmodified.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_li
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The index of the link this data was decoded from. You may pass
										<computeroutput>
											NULL
										</computeroutput>
										if you do not need this information. If this function fails (returning a negative value), this parameter is left unset.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The number of samples read per channel on success, or a negative value on failure. The channel count can be retrieved on success by calling
								<computeroutput>
									op_head(_of,*_li)
								</computeroutput>
								. The number of samples returned may be 0 if the buffer was too small to store even a single sample for all channels, or if end-of-file was reached. The list of possible failure codes follows. Most of them can only be returned by unseekable, chained streams that encounter a new link.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ac03d35986d3505305d468dd2138b72" kindref="member">
											OP_HOLE
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										There was a hole in the data, and some samples may have been skipped. Call this function again to continue decoding past the hole.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" kindref="member">
											OP_EREAD
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An underlying read operation failed. This may signal a truncation attack from an &lt;https:&gt; source.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An internal memory allocation failed.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaeea27378f826033ca23584d8403665d3" kindref="member">
											OP_EIMPL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link that used a feature that is not implemented, such as an unsupported channel family.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was only partially open.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">
											OP_ENOTFORMAT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link that did not have any logical Opus streams in it.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">
											OP_EBADHEADER
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with a required header packet that was not properly formatted, contained illegal values, or was missing altogether.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" kindref="member">
											OP_EVERSION
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with an ID header that contained an unrecognized version number.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaa3fa0a3e6facc4f47924271e65bb21ff" kindref="member">
											OP_EBADPACKET
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Failed to properly decode the next packet.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf7b58a439a471366e9eb5b8f2a8cd041" kindref="member">
											OP_EBADLINK
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										We failed to find data we had seen before.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf82657fc888f1dcf2e0d8f066b8a6cc7" kindref="member">
											OP_EBADTIMESTAMP
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with a starting timestamp that failed basic validity checks.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1841" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__decoding_1ga73493002d84a234f5e19b70f1dddbe2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT int
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT int op_read_float
				</definition>
				<argsstring>
					(OggOpusFile *_of, float *_pcm, int _buf_size, int *_li) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_read_float
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						float *
					</type>
					<declname>
						_pcm
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_buf_size
					</declname>
				</param>
				<param>
					<type>
						int *
					</type>
					<declname>
						_li
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Reads more samples from the stream.
						<simplesect kind="note">
							<para>
								Although
								<emphasis>
									_buf_size
								</emphasis>
								must indicate the total number of values that can be stored in
								<emphasis>
									_pcm
								</emphasis>
								, the return value is the number of samples
								<emphasis>
									per channel
								</emphasis>
								.
								<orderedlist>
									<listitem>
										<para>
											The channel count cannot be known a priori (reading more samples might advance us into the next link, with a different channel count), so
											<emphasis>
												_buf_size
											</emphasis>
											cannot also be in units of samples per channel,
										</para>
									</listitem>
									<listitem>
										<para>
											Returning the samples per channel matches the
											<computeroutput>
												libopus
											</computeroutput>
											API as closely as we&apos;re able,
										</para>
									</listitem>
									<listitem>
										<para>
											Returning the total number of values instead of samples per channel would mean the caller would need a division to compute the samples per channel, and might worry about the possibility of getting back samples for some channels and not others, and
										</para>
									</listitem>
									<listitem>
										<para>
											This approach is relatively fool-proof: if an application passes too small a value to
											<emphasis>
												_buf_size
											</emphasis>
											, they will simply get fewer samples back, and if they assume the return value is the total number of values, then they will simply read too few (rather than reading too many and going off the end of the buffer).
										</para>
									</listitem>
								</orderedlist>
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to read.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_pcm
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A buffer in which to store the output PCM samples as signed floats at 48
										<nonbreakablespace />
										kHz with a nominal range of
										<computeroutput>
											[-1.0,1.0]
										</computeroutput>
										. Multiple channels are interleaved using the
										<ulink url="http://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-800004.3.9">
											Vorbis channel ordering
										</ulink>
										. This must have room for at least
										<emphasis>
											_buf_size
										</emphasis>
										floats.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_buf_size
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of floats that can be stored in
										<emphasis>
											_pcm
										</emphasis>
										. It is recommended that this be large enough for at least 120 ms of data at 48 kHz per channel (5760 samples per channel). Smaller buffers will simply return less data, possibly consuming more memory to buffer the data internally. If less than
										<emphasis>
											_buf_size
										</emphasis>
										values are returned,
										<computeroutput>
											libopusfile
										</computeroutput>
										makes no guarantee that the remaining data in
										<emphasis>
											_pcm
										</emphasis>
										will be unmodified.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_li
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The index of the link this data was decoded from. You may pass
										<computeroutput>
											NULL
										</computeroutput>
										if you do not need this information. If this function fails (returning a negative value), this parameter is left unset.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The number of samples read per channel on success, or a negative value on failure. The channel count can be retrieved on success by calling
								<computeroutput>
									op_head(_of,*_li)
								</computeroutput>
								. The number of samples returned may be 0 if the buffer was too small to store even a single sample for all channels, or if end-of-file was reached. The list of possible failure codes follows. Most of them can only be returned by unseekable, chained streams that encounter a new link.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ac03d35986d3505305d468dd2138b72" kindref="member">
											OP_HOLE
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										There was a hole in the data, and some samples may have been skipped. Call this function again to continue decoding past the hole.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" kindref="member">
											OP_EREAD
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An underlying read operation failed. This may signal a truncation attack from an &lt;https:&gt; source.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An internal memory allocation failed.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaeea27378f826033ca23584d8403665d3" kindref="member">
											OP_EIMPL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link that used a feature that is not implemented, such as an unsupported channel family.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was only partially open.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">
											OP_ENOTFORMAT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link that did not have any logical Opus streams in it.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">
											OP_EBADHEADER
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with a required header packet that was not properly formatted, contained illegal values, or was missing altogether.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" kindref="member">
											OP_EVERSION
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with an ID header that contained an unrecognized version number.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaa3fa0a3e6facc4f47924271e65bb21ff" kindref="member">
											OP_EBADPACKET
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Failed to properly decode the next packet.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf7b58a439a471366e9eb5b8f2a8cd041" kindref="member">
											OP_EBADLINK
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										We failed to find data we had seen before.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf82657fc888f1dcf2e0d8f066b8a6cc7" kindref="member">
											OP_EBADTIMESTAMP
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with a starting timestamp that failed basic validity checks.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1922" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__decoding_1gaaca17ad3fd6430dc8fd43308149428eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT int
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT int op_read_stereo
				</definition>
				<argsstring>
					(OggOpusFile *_of, opus_int16 *_pcm, int _buf_size) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_read_stereo
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						opus_int16 *
					</type>
					<declname>
						_pcm
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_buf_size
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Reads more samples from the stream and downmixes to stereo, if necessary. This function is intended for simple players that want a uniform output format, even if the channel count changes between links in a chained stream.
						<simplesect kind="note">
							<para>
								<emphasis>
									_buf_size
								</emphasis>
								indicates the total number of values that can be stored in
								<emphasis>
									_pcm
								</emphasis>
								, while the return value is the number of samples
								<emphasis>
									per channel
								</emphasis>
								, even though the channel count is known, for consistency with
								<ref refid="group__stream__decoding_1ga963c917749335e29bb2b698c1cb20a10" kindref="member">
									op_read()
								</ref>
								.
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to read.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_pcm
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A buffer in which to store the output PCM samples, as signed native-endian 16-bit values at 48
										<nonbreakablespace />
										kHz with a nominal range of
										<computeroutput>
											[-32768,32767)
										</computeroutput>
										. The left and right channels are interleaved in the buffer. This must have room for at least
										<emphasis>
											_buf_size
										</emphasis>
										values.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_buf_size
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of values that can be stored in
										<emphasis>
											_pcm
										</emphasis>
										. It is recommended that this be large enough for at least 120 ms of data at 48 kHz per channel (11520 values total). Smaller buffers will simply return less data, possibly consuming more memory to buffer the data internally. If less than
										<emphasis>
											_buf_size
										</emphasis>
										values are returned,
										<computeroutput>
											libopusfile
										</computeroutput>
										makes no guarantee that the remaining data in
										<emphasis>
											_pcm
										</emphasis>
										will be unmodified.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The number of samples read per channel on success, or a negative value on failure. The number of samples returned may be 0 if the buffer was too small to store even a single sample for both channels, or if end-of-file was reached. The list of possible failure codes follows. Most of them can only be returned by unseekable, chained streams that encounter a new link.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ac03d35986d3505305d468dd2138b72" kindref="member">
											OP_HOLE
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										There was a hole in the data, and some samples may have been skipped. Call this function again to continue decoding past the hole.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" kindref="member">
											OP_EREAD
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An underlying read operation failed. This may signal a truncation attack from an &lt;https:&gt; source.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An internal memory allocation failed.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaeea27378f826033ca23584d8403665d3" kindref="member">
											OP_EIMPL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link that used a feature that is not implemented, such as an unsupported channel family.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was only partially open.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">
											OP_ENOTFORMAT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link that did not have any logical Opus streams in it.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">
											OP_EBADHEADER
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with a required header packet that was not properly formatted, contained illegal values, or was missing altogether.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" kindref="member">
											OP_EVERSION
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with an ID header that contained an unrecognized version number.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaa3fa0a3e6facc4f47924271e65bb21ff" kindref="member">
											OP_EBADPACKET
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Failed to properly decode the next packet.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf7b58a439a471366e9eb5b8f2a8cd041" kindref="member">
											OP_EBADLINK
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										We failed to find data we had seen before.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf82657fc888f1dcf2e0d8f066b8a6cc7" kindref="member">
											OP_EBADTIMESTAMP
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with a starting timestamp that failed basic validity checks.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="1983" column="1" />
			</memberdef>
			<memberdef kind="function" id="group__stream__decoding_1ga9736f96563500c0978f56f0fd6bdad83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
				<type>
					OP_WARN_UNUSED_RESULT int
				</type>
				<definition>
					OP_WARN_UNUSED_RESULT int op_read_float_stereo
				</definition>
				<argsstring>
					(OggOpusFile *_of, float *_pcm, int _buf_size) OP_ARG_NONNULL(1)
				</argsstring>
				<name>
					op_read_float_stereo
				</name>
				<param>
					<type>
						OggOpusFile *
					</type>
					<declname>
						_of
					</declname>
				</param>
				<param>
					<type>
						float *
					</type>
					<declname>
						_pcm
					</declname>
				</param>
				<param>
					<type>
						int
					</type>
					<declname>
						_buf_size
					</declname>
				</param>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						Reads more samples from the stream and downmixes to stereo, if necessary. This function is intended for simple players that want a uniform output format, even if the channel count changes between links in a chained stream.
						<simplesect kind="note">
							<para>
								<emphasis>
									_buf_size
								</emphasis>
								indicates the total number of values that can be stored in
								<emphasis>
									_pcm
								</emphasis>
								, while the return value is the number of samples
								<emphasis>
									per channel
								</emphasis>
								, even though the channel count is known, for consistency with
								<ref refid="group__stream__decoding_1ga73493002d84a234f5e19b70f1dddbe2a" kindref="member">
									op_read_float()
								</ref>
								.
							</para>
						</simplesect>
						<parameterlist kind="param">
							<parameteritem>
								<parameternamelist>
									<parametername>
										_of
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The
										<computeroutput>
											OggOpusFile
										</computeroutput>
										from which to read.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername direction="out">
										_pcm
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										A buffer in which to store the output PCM samples, as signed floats at 48
										<nonbreakablespace />
										kHz with a nominal range of
										<computeroutput>
											[-1.0,1.0]
										</computeroutput>
										. The left and right channels are interleaved in the buffer. This must have room for at least
										<emphasis>
											_buf_size
										</emphasis>
										values.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										_buf_size
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The number of values that can be stored in
										<emphasis>
											_pcm
										</emphasis>
										. It is recommended that this be large enough for at least 120 ms of data at 48 kHz per channel (11520 values total). Smaller buffers will simply return less data, possibly consuming more memory to buffer the data internally. If less than
										<emphasis>
											_buf_size
										</emphasis>
										values are returned,
										<computeroutput>
											libopusfile
										</computeroutput>
										makes no guarantee that the remaining data in
										<emphasis>
											_pcm
										</emphasis>
										will be unmodified.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
						<simplesect kind="return">
							<para>
								The number of samples read per channel on success, or a negative value on failure. The number of samples returned may be 0 if the buffer was too small to store even a single sample for both channels, or if end-of-file was reached. The list of possible failure codes follows. Most of them can only be returned by unseekable, chained streams that encounter a new link.
							</para>
						</simplesect>
						<parameterlist kind="retval">
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ac03d35986d3505305d468dd2138b72" kindref="member">
											OP_HOLE
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										There was a hole in the data, and some samples may have been skipped. Call this function again to continue decoding past the hole.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga3ad48a4f99b1bed72acec552296dfc08" kindref="member">
											OP_EREAD
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An underlying read operation failed. This may signal a truncation attack from an &lt;https:&gt; source.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga2ddb887c0bb55c74ea6be391fabcba59" kindref="member">
											OP_EFAULT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An internal memory allocation failed.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaeea27378f826033ca23584d8403665d3" kindref="member">
											OP_EIMPL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link that used a feature that is not implemented, such as an unsupported channel family.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gae0879acafe9cc0ab72462d291fdb6fb6" kindref="member">
											OP_EINVAL
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										The stream was only partially open.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gafca3ae244d24e10b2851c77379453220" kindref="member">
											OP_ENOTFORMAT
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link that that did not have any logical Opus streams in it.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1ga534f1b45c8733a2928434e482b38869f" kindref="member">
											OP_EBADHEADER
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with a required header packet that was not properly formatted, contained illegal values, or was missing altogether.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaa9ae4494f623f3c0609f0b4bd99b8f32" kindref="member">
											OP_EVERSION
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with an ID header that contained an unrecognized version number.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaa3fa0a3e6facc4f47924271e65bb21ff" kindref="member">
											OP_EBADPACKET
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										Failed to properly decode the next packet.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf7b58a439a471366e9eb5b8f2a8cd041" kindref="member">
											OP_EBADLINK
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										We failed to find data we had seen before.
									</para>
								</parameterdescription>
							</parameteritem>
							<parameteritem>
								<parameternamelist>
									<parametername>
										<ref refid="group__error__codes_1gaf82657fc888f1dcf2e0d8f066b8a6cc7" kindref="member">
											OP_EBADTIMESTAMP
										</ref>
									</parametername>
								</parameternamelist>
								<parameterdescription>
									<para>
										An unseekable stream encountered a new link with a starting timestamp that failed basic validity checks.
									</para>
								</parameterdescription>
							</parameteritem>
						</parameterlist>
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="2044" column="1" />
			</memberdef>
		</sectiondef>
		<sectiondef kind="define">
			<memberdef kind="define" id="opusfile_8h_1a7345887d51c7eb440d45438539e85406" prot="public" static="no">
				<name>
					_opusfile_h
				</name>
				<initializer>
					(1)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="16" column="10" bodyfile="includes/personnal/opusfile.h" bodystart="16" bodyend="-1" />
			</memberdef>
			<memberdef kind="define" id="group__header__info_1gad6f0329582430a828244045ac85a5417" prot="public" static="no">
				<name>
					OPUS_CHANNEL_COUNT_MAX
				</name>
				<initializer>
					(255)
				</initializer>
				<briefdescription>
				</briefdescription>
				<detaileddescription>
					<para>
						The maximum number of channels in an Ogg Opus stream.
					</para>
				</detaileddescription>
				<inbodydescription>
				</inbodydescription>
				<location file="includes/personnal/opusfile.h" line="196" column="9" bodyfile="includes/personnal/opusfile.h" bodystart="196" bodyend="-1" />
			</memberdef>
		</sectiondef>
		<briefdescription>
		</briefdescription>
		<detaileddescription>
		</detaileddescription>
		<location file="includes/personnal/opusfile.h" />
	</compounddef>
</doxygen>
